       ОБЪЕДИНЕННЫЙ  ИНСТИТУТ  ЯДЕРНЫХ  ИССЛЕДОВАНИЙ

   ЛАБОРАТОРИЯ  ВЫЧИСЛИТЕЛЬНОЙ  ТЕХНИКИ  И  АВТОМАТИЗАЦИИ

















                        САПОЖНИКОВА

                     Татьяна  Федоровна





          МЕТОДИКА  СОЗДАНИЯ  И  НАСТРОЙКИ   Э В М

          С  ИСПОЛЬЗОВАНИЕМ  МИКРОПРОГРАММИРОВАНИЯ













                                      специальность: 05.13.11

          Диссертация на соискание ученой степени

            кандидата физико-математических наук







                                       Научные руководители:

                         Доктор физ.мат.наук      Силин И.Н.

                         Кандидат тех.наук Левчановский Ф.В.













                        Дубна  1992






                    С О Д Е Р Ж А Н И Е

Введение....................................................4

I.Обзор.....................................................9

   1.1.Метод микропрограммирования..........................9

   1.2.Роль микропрограммирования в архитектуре ЭВМ........11

   1.3.Микропрограммирование и эмуляция....................14

   1.4.Преимущества и недостатки микропрограммирования.....16

II.Методика  и  инструментальные   средства   для   создания,
   контроля и обслуживания универсальной ЭВМ МКБ-8601......19

   2.1.Программный имитатор МКБ............................20

   2.2.Логическое моделирование ЦП МКБ.....................21

   2.3.Микропрограммное тестирование МКБ...................25

      2.3.1.Структура  микропрограммных  тестов  и   методика
         тестирования......................................26

      2.3.2.Тесты центрального процессора..................28

      2.3.3.Тесты ОЗУ МКБ-8601.............................29

      2.3.4.Микропрограммные тесты других объектов.........31

III.Многоуровневая организация ЭВМ.........................32

   3.1.Основные модули ЭВМ МКБ-8601........................32

      Центральный процессор.  Оперативная  память.  Пультовой
      процессор. Общая шина.

   3.2.Многоуровневая организация ЭВМ......................34

   3.3.Традиционный машинный уровень.......................36

      Форматы данных. Представление  чисел.  Форматы  команд.
      Формирование   исполнительных   адресов.   Префиксация.
      Магазинное обращение. Тег. Приписка  и  защита  памяти.
      Регистры.

   3.4.Микропрограммный уровень............................41

      Блок микропрограммного управления. Управляющая  память.
      Основные   операционные   блоки    процессора    уровня
      микромашины.

   3.5.Микропрограммная инструкция. Структура микрокомандного
      слова................................................45

   3.6.Язык микропрограммирования..........................46

   3.7.Способы контроля микрокоманд........................48

   3.8.Совмещение операций.................................50

IV.Принципы организации микропрограммного обеспечения МКБ..52

   4.1.Организация   системы   команд.   Команды    поддержки
      системных и прикладных программ......................52


   4.2.Умножение и деление. Арифметика с плавающей запятой.55

   4.3.Особенности микропрограммной реализации префиксации  и
      магазинного способа адресации........................58

   4.4.Система прерываний и экстракодов....................59

      Процессы.  Ресурсы  процесса.   Экстракоды.   Поддержка
      прерываний.  Псевдопрерывания.  Внутренние  прерывания.
      Внешние прерывания.

   4.5.Чтение,  запись   регистров.   Обмен   информацией   с
      пультовым процессором................................70

V.Изменение архитектуры МКБ  для  эмуляции  БЭСМ-6  и  другие
   применения микропрограммирования........................71

   5.1.Организация     микропрограммного      уровня      для
      интерпретации одной или нескольких машин.............71

   5.2.Эмуляция ЭВМ БЭСМ-6.................................72

      5.2.1.Микропрограммный  уровень   МКБ    для   эмуляции
         БЭСМ-6............................................73

      5.2.2.Традиционный машинный уровень БЭСМ-6...........73

         Представление чисел БЭСМ-6. Формат команд  эмулятора
         БЭСМ-6.

      5.2.3.Особенности исполнения команд в РЭ.............75

         Логические команды. Эмуляция арифметики с  плавающей
         запятой.

   5.3.Эмуляция ЭВМ Эльбрус-Б..............................75

   5.4.Работа в реальном масштабе времени..................76

   5.5.Подбор длительности такта. Производительность ЭВМ...79

Заключение. Основные результаты............................83

Литература.................................................85

Приложение А...............................................91

Приложение Б...............................................93




                         Введение.


   Современная технология цифровых БИС и, прежде всего, метод
микропрограммирования позволяют  проводить  проектирование  и
производство  ЭВМ  относительно  небольшими  коллективами  за
приемлемые сроки времени. Это открывает возможность  создания
ЭВМ, ориентированных  на  потребности  одной  или  нескольких
организаций, или предназначенных для  решения  узких  классов
задач.  Подобные  ЭВМ  могут  быть  изготовлены  очень  малой
серией,  часто  в  количестве  нескольких  штук.  Разумеется,
затраты на создание одной такой  ЭВМ  больше,  чем  в  случае
массового производства, но  точная  подгонка  параметров  под
условия эксплуатации с  использованием  микропрограммирования
может оправдать дополнительные расходы.

   Проведение подобной работы в короткие сроки и вовлечение в
разработку  малого  количества  сотрудников  делают   условия
особенно  жесткими.  Также  возникает  проблема  максимальной
проверки создаваемой ЭВМ  на  программных  моделях,  так  как
позволяет уменьшить  загрузку  ограниченных  производственных
мощностей и время наладки. Таким образом,  задача  разработки
методик   создания   ЭВМ   малой   группой   с    интенсивным
использованием моделирования на ЭВМ, является актуальной.

   Цель работы. Основной целью данной работы была  разработка
   ───────────╴
методики   и   инструментальных    средств    для    создания
универсальной ЭВМ с применением техники микропрограммирования
и практическая реализация на их основе  ЭВМ,  совместимой  на
пользовательском командном уровне с машинами  типа  БЭСМ-6  и
Эльбрус-Б.

   ЭВМ БЭСМ-6. промышленностью больше не  выпускается,  и  во
многих   организациях   она   выводится   или   выведена   из
эксплуатации.   Архитектура   БЭСМ-6    сравнительно    легко
переводится  на  современную  технологическую  базу   больших
интегральных  схем  с  использованием  микропрограммирования.
Поэтому    аппаратная    эмуляция    БЭСМ-6    представлялась
экономически более  оправданной,  чем  переработка  огромного
объема оригинального программного обеспечения, созданного для
ЭВМ БЭСМ-6 за длительный период ее эксплуатации.

   Также ставилась цель создать  ЭВМ,  имеющую  аппаратные  и
программные средства для расширения набора микропрограмм. Это
позволит  вводить  в   машину   новые   команды,   специально
предназначенные  для  тех  или  иных  специфических   режимов

использования.

   Разработанная ЭВМ МКБ-8601 помимо эмуляции БЭСМ-6 способна
работать  в  режиме  с  расширенным  списком  команд.  В  нем
устранены основные недостатки ЭВМ БЭСМ-6: малый порядок чисел
с   плавающей   запятой,   недостаточный   размер   адресного
пространства, а  также  увеличена  длина  слова,  разрядность
индекс-регистров,  введен  тег,   семафорные   операции   для
многопроцессорного режима, команды целой арифметики и  др.  В
этом  режиме  система  команд  согласована  с  вычислительной
системой Эльбрус-Б,  что  позволяет  рассматривать  созданную
машину в качестве младшей модели семейства ЭВМ Эльбрус.

   Научная новизна. В  работе  описан  комплексный  подход  к
   ───────────────╴
разработке   и    отладке    микропрограммного    обеспечения
архитектуры ЭВМ, позволяющий  осуществлять  проектирование  и
создание ЭВМ небольшими группами  с  минимальным  количеством
промежуточных макетных образцов.

   Предложено новое решение актуальной проблемы:  разработана
вычислительная  система,  открытая  к   наращиванию   системы
команд,  т.е.  специализации  к  конкретному  классу   задач.
Система не только способна работать в  собственном  режиме  и
режиме эмуляции БЭСМ-6,  но  и  комбинировать  эти  режимы  в
рамках  одной  задачи.  Особенностью  двух   режимов   работы
является их взаимное "проникновение", когда программы  БЭСМ-6
могут считаться с повышенной точностью другого режима.

   Обеспечен единообразный подход как к разработке, так  и  к
расширению возможностей ЭВМ с одновременным  изготовлением  и
коррекцией документов.

   Практическая ценность.  Предлагаемая  методика  разработки
   ─────────────────────╴
ЭВМ может успешно использоваться при  создании  в  НИИ  новых
специализированных ЭВМ и другой цифровой аппаратуры.

   МКБ-8601,  разработанная  с  применением  этой   методики,
позволяет   использовать    практически    все    программное
обеспечение ЭВМ БЭСМ-6 (за исключением программ, работающих с
нестандартными внешними устройствами). Кроме того,  ее  можно
использовать и  при  решении  широкого  круга  других  задач.
Наиболее важными характеристиками системы являются:

   а)простой способ  внесения  изменений  в  систему  для  ее
специализации, т.к. введение новых  возможностей  не  требует
дополнительной аппаратуры,  кроме  некоторого  объема  памяти
микропрограмм;


   б)реализация на  микропрограммном  уровне  обработки  ряда
прерываний, что уменьшает время отклика при работе  в  режиме
ON-LINE    с    экспериментальным     или     технологическим
оборудованием;

   в)возможность  вынесения   на   микропрограммный   уровень
специфических для некоторого круга задач действий,  например,
генераторы псевдослучайных чисел, поиск по таблицам и др.;

   г)большое  адресное  пространство,  52-разрядная  мантисса
числа  с  плавающей  запятой  и  наличие  целой   арифметики,
позволяющие  легко   программировать   алгоритмы   численного
анализа, в том числе чувствительные к потере точности;

   д)совместимость с  ЭВМ  Эльбрус-Б,  позволяющая  создавать
общие с этими машинами программы;

   е)использование в одной задаче основного режима  и  режима
эмуляции, дающее возможность при  разработке  новых  программ
включать хорошо  проверенные  библиотеки  и  пакеты  программ
БЭСМ-6;

   ж)система семафоров для работы машины в  многопроцессорных
системах;

   з)сравнительно  малые  стоимость   и   размеры   МКБ-8601,
позволяющие использовать ее как рабочую станцию.

   Рекомендации к применению.  Малые  геометрические  размеры
   ─────────────────────────╴
разработанной    ЭВМ    МКБ-8601    открывают     возможности
использования ее не  только  как  вычислителя  для  обработки
результатов физических  экспериментов,  в  автоматизированных
рабочих местах проектировщика или спектральном анализе, но  и
в системах на линии  с  экспериментальным  и  технологическим
оборудованием: для управления экспериментальными  физическими
установками, для съема информации и т.д. Более того,  наличие
аппаратно-микропрограммной  поддержки  идей  мультипрограмми-
рования позволяет использовать ее одновременно в  обоих  этих
качествах.

   Разработанное    микропрограммное     обеспечение     дает
возможность использовать МКБ в качестве эмулятора ЭВМ БЭСМ-6,
а также в  качестве  программно  совместимой  младшей  модели
вычислительной  системы  ЭЛЬБРУС-Б.   МКБ-8601   представляет
определенный интерес для всех пользователей ЭВМ БЭСМ-6.

   Научные результаты, выводы  и  рекомендации  обоснованы  и
подтверждены  работой  на  макетном  образце  МКБ   программ,
перенесенных с БЭСМ-6, а также вновь созданных.


   Апробация работы и публикации.

  ╶─────────────────────────────╴
   Все результаты работы докладывались на  научных  семинарах
ЛВТА и ЛВЭ ОИЯИ и опубликованы в виде препринтов и  сообщений
ОИЯИ, депонированных публикаций и статей в журналах, в трудах
Симпозиума  по  применению   микро-ЭВМ   и   микропроцессоров
(Будапешт).

   Основное содержание диссертации опубликовано в 11 печатных
работах.

   Структура и объем диссертации.

  ╶─────────────────────────────╴
   Диссертация состоит из введения,  пяти  глав,  заключения,
списка литературы из 77 наименований и 2 приложений, содержит
1 таблицу и 14 рисунков. Общий объем составляет 96 страниц.

   Содержание диссертации.

   ──────────────────────╴
   В первой главе рассматривается  метод  микропрограммирова-
  ╶──────────────╴
ния, используемый для построения  устройств  управления  ЭВМ.
Микропрограммирование    является    средством    обеспечения
архитектуры ЭВМ, т.к. оно  реализует  систему  команд,  форму
представления данных, способы адресации.  Микропрограммирова-
ние можно использовать также в  целях  изменения  архитектуры
ЭВМ для ее специализации  к  конкретному  классу  задач,  для
замены обычных программ при выполнении функций разных уровней
программного обеспечения, при эмуляции, в работе на  линии  с
экспериментальным оборудованием. Микропрограммное  управление
уступает  схемному  по  быстродействию,  однако  обеспечивает
большую  гибкость  и  экономичность  при  реализации  сложной
управляющей логики.

   Во второй главе описывается  методика  и  инструментальные
   ───────────────╴
средства  для  создания  и  настройки  универсальной  ЭВМ   с
использованием   микропрограммирования,    заключающаяся    в
определении архитектуры создаваемой  ЭВМ  и  проверке  ее  на
программных моделях, в разработке комплекса  микропрограммных
средств для обеспечения заданной  архитектуры  и  модификации
микропрограммного обеспечения при  настройке  архитектуры  на
решение конкретных задач.

   В соответствии с этой методикой была создана универсальная
ЭВМ МКБ-8601. Используемые инструментальные средства:

   - программный  имитатор  разрабатываемой  ЭВМ,  в  котором
моделируется архитектура МКБ для одного процесса;

   - система логического моделирования, позволяющая проверить
возможность   реализации   заданной   архитектуры   в    виде

программной  модели  на   конкретной   технологической   базе
цифровых интегральных схем;

   - система микропрограммных тестов.

   В третьей главе дается  общая   характеристика   МКБ-8601,
  ╶───────────────╴
которая является универсальной ЭВМ с модульной  организацией.
Основными модулями  МКБ  являются:  оперативное  запоминающее
устройство, центральный процессор (их может быть  несколько),
пультовой процессор, внешние  устройства.  Обмен  информацией
между ними осуществляется через общую шину данных.

   Рассматривается   традиционный    машинный    уровень    и
микропрограммный   уровень   МКБ-8601,   описывается   формат
микрокомандного  слова,   обсуждаются   проблемы   совмещения
операций и некоторые способы их решения.

   В четвертой главе описывается  организация   микропрограм-
  ╶─────────────────╴
много обеспечения МКБ, реализующая выполнение  команд,  вызов
системных макрокоманд - экстракодов и  поддержку  прерываний.
Система команд  МКБ  существенно  расширена  по  сравнению  с
БЭСМ-6,  поэтому  эффективность  ее  по   некоторым   оценкам
возросла в 2-3 раза.

   Главная  задача  микропрограммы,  начинающей  работать  от
прерывания - сохранить состояние  прерванного  процесса.  Все
прерывания МКБ в зависимости от способа их обработки  делятся
на  внешние,   внутренние   и   псевдопрерывания.   Обработка
псевдопрерываний  происходит  на   микропрограммном   уровне.
Обработка  внешних  и  внутренних  прерываний  происходит  на
уровне операционной системы.

   Пятая глава посвящена  вопросам  использования   микропро-
   ───────────╴
граммирования  при  работе  на  линии   с   экспериментальным
оборудованием и изменения архитектуры МКБ для эмуляции БЭСМ-6
и Эльбрус-Б.  Количество  аппаратуры  для  реализации  режима
эмуляции БЭСМ-6 очень незначительно,  основная  часть  работы
выполняется микропрограммно. Представление чисел с  плавающей
запятой  в  режиме  эмуляции  дает   возможнсть   увеличивать
точность  вычислений  в  режиме   эмуляции.   Рассматриваются
вопросы   подбора   длительности   микропрограммного   такта,
обсуждаются  вопросы   эффективности   микропрограммирования,
приводятся примеры использования микропрограммного  уровня  в
МКБ  для  нужд  операционной  системы  и  для  повышения   ее
эффективности.


                          I.Обзор.


              1.1.Метод микропрограммирования.


   Современные вычислительные системы  становятся  все  более
производительными и все более  сложными.  Следовательно,  все
больше  специальных  знаний  и  навыков  требуется   при   их
проектировании. Метод микропрограммирования,  предложенный  в
1951 году  Уилксом  как  средство  систематизации  выполнения
управляющей  логики   в   цифровых   компьютерах,   позволяет
упростить этот процесс /1-5/.

   Микропрограммирование  по  своей  сути  изначально   более
мощное  средство,  чем  программирование  в  системе   команд
процессора, по ряду причин, главная из  которых  -  доступ  к
внутренним ресурсам ЭВМ на уровне машинного цикла. От полноты
набора микропрограммных средств, от  качества  их  интерфейса
зависят   такие    характеристики    ЭВМ,    как    гибкость,
эффективность, мобильность.

   Во всякой ЭВМ существует  устройство  управления,  которое
расшифровывает  команды  или   инструкции,   поступающие   из
запоминающего    устройства,    следит     за     соблюдением
последовательности   и   правильности   выполнения    команд,
организует потоки информации  внутри  машины  и  координирует
работу всех устройств. Электронные схемы управления  являются
наиболее сложными в ЭВМ,  т.к.  на  них  возлагаются  функции
обеспечения параллелизма в работе отдельных блоков  и  узлов,
функции  синхронизации   и   т.д.   Различают   два   способа
организации управления:  схемное  или  управление  с  жесткой
логикой и микропрограммное.

   Устройство управления является конечным автоматом /6/.  На
его  n   входов   поступает   комбинация   входных   сигналов
x ,x ,...,x , которая преобразуется  в  последовательность  m
 1  2      n
выходных сигналов y ,y ,...,y . Эти  выходные  сигналы  могут
                   1  2      m
быть поданы  на  вход  устройства  управления  более  низкого
уровня иерархии  или  непосредственно  на  вход  управляемого
устройства. Каждый выходной сигнал y  можно описать как функ-
                                    j
цию входных сигналов и внутреннего состояния устройства G:

           y =F (x ,x ,...,x ,G),    j=1,2,...,m.

             j  j  1  2      n
   Управление реализуется схемно, если функция F  выполняется
                                                j
с помощью комбинаторных схем и триггеров, соединенных  нужным
образом, чтобы вырабатывать временные и  управляющие  сигналы
для машины.


   Микропрограммное управление  состоит  в  следующем.  Любая
функция F   рассматривается  как  сложная  операция,  которую
         j
можно разделить на последовательность элементарных  действий,
называемых микрокомандами. Для управления порядком следования
микрокоманд   используются   логические   условия.    Процесс
выполнения  операций  в  устройстве  описывается   в    форме
алгоритма,   представляемого   в   терминах   микрокоманд   и
логических  условий,  и  называется  микропрограммой.  Обычно
микропрограммы  хранятся  в   оперативной   или   специальной
управляющей памяти с быстрой выборкой.

   В  общем  случае   микропрограммирование   -   это   метод
проектирования  и  реализации   функций   управления   систем
обработки  данных  в  виде   последовательности   управляющих
сигналов, которые должны интерпретировать  фиксированную  или
динамически  изменяемую  архитектуру   системы.   Управляющие
сигналы, которые представляют состояния вычислительной машины
и   упорядоченные   переходы   между    этими    состояниями,
организованы на базе слов, хранящихся в управляющей памяти  с
фиксированным или динамически изменяющимся содержимым /1,7/.

   Схемная  реализация  устройства  управления  обычно  более
быстродействующая по сравнению с последовательным вычислением
управляющих  сигналов   по   микропрограммам,   но   суживает
возможности    расширения    репертуара    команд,     жестко
закоммутированных в схемах управления. Организация управления
по микропрограммному принципу открывает  широкие  возможности
для гибкого изменения  возможностей  машины,  которая  обычно
более  организована  и  упорядочена  с  помощью   управляющих
функциональных полей.

   Хотя микропрограммирование  сразу  после  его  изобретения
представлялось достаточно  мощным  средством,  использоваться
активно  оно  стало   значительно   позже   после   появления
недорогих, но быстродействующих  запоминающих  устройств  для
управляющей  памяти,  у  которых  время  доступа  существенно
меньше,  чем  цикл  работы  основной  памяти.   С   тех   пор
микропрограммирование превратилось в  признанную  методологию
построения логических устройств,  являясь  в  некотором  роде
"интерфейсом" между аппаратным и программным обеспечением.

   Микропрограммный  принцип  чаще  используется  в  малых  и
средних   ЭВМ   /8-12/.    В    Советском    Союзе    принцип
микропрограммного  управления  впервые   был   применен   при

создании малых машин семейств МИР и Наири /4/. В  IBM  360/85
микропрограммирование используется на фазе исполнения команды
/3/. Такие функции, как выборка команды  (ожидание  выборки),
управление счетчиком команд и  предварительное  декодирование
кода операции  (например,  для  подготовки  команды  передачи
управления) исполняются аппаратно. В машинах такого типа блок
выборки команды и  блок  исполнения  команды  -  относительно
независимые блоки.



     1.2.Роль микропрограммирования в архитектуре ЭВМ.


   Понятие архитектуры семейства ЭВМ возникло в 1963-1964 гг.
с появлением семейства машин третьего поколения фирмы IBM,  а
именно системы  IBM-360.  В  отличие  от  понятия  структуры,
связанного с внутренней организацией и  функциями  аппаратуры
ЭВМ, понятие архитектуры касается представления о  системе  в
целом,  связывается  с  тем,  как  ЭВМ  или   семейство   ЭВМ
представляется пользователю. Поэтому  в  понятие  архитектуры
включается весь комплекс программных и аппаратных средств,  с
помощью    которых    обеспечивается    выполнение    заданий
пользователя. Это в первую очередь сведения о системе команд,
о связях отдельных модулей  ЭВМ,  о  составе  математического
обеспечения.  Типы  машин  одного  семейства  различаются,  и
иногда  очень  сильно,  по  своей  структуре  и  техническому
выполнению, хотя их архитектура  может  считаться  одинаковой
/4/.

   В /13/ дается такое определение: "Архитектура  ЭВМ  -  это
абстрактное представление или определение физической  системы
(микропрограммы или комплекса  аппаратных  средств)  с  точки
зрения программиста, разрабатывающего программы на машинно  -
ориентированном языке,  например,  разработчика  компилятора.
Она определяет принципы организации вычислительной системы  и
функции  процессора  и  не  отражает  такие   проблемы,   как
управление   и    передача    данных    внутри    процессора,
конструктивные  особенности  логических  схем   и   специфика
технологии их производства".

   Для  основной  массы  пользователей  микропрограммирование
выглядит как некоторый инженерный прием внутренней реализации
машины, непосредственно не влияющий на ее  внешние  свойства.
На  самом  деле  микропрограммирование  позволяет   полностью
отделить задачу удовлетворения требований к машине со стороны

программиста-пользователя от технических  условий  реализации
машины.   Микропрограммирование   можно   считать   средством
обеспечения  архитектуры  ЭВМ,  т.к.  оно  реализует  правила
интерпретации программы: систему команд, форму  представления
данных, способы адресации и т.д. Составляя необходимый  набор
микропрограмм, можно придать имеющейся вычислительной  машине
почти любые архитектурные свойства, в том  числе  и  для  для
одной какой-либо конкретной задачи.

   Микропрограммирование применяется в следующих областях:

   1)разработка устройств управления для  некоторой  заданной
архитектуры системы;

   2)внесение  изменений  или   добавлений   в   существующую
архитектуру для специализации к конкретному классу задач;

   3)выполнение  функций   различных   уровней   программного
обеспечения (от операционных систем до прикладных программ);

   4)эмуляция     некоторых     отсутствующих      аппаратных
возможностей;

   5)использование в  "системах  с  непосредственной  связью"
(ON-LINE)  и  "системах,  работающих  в   реальном   масштабе
времени" (REAL-TIME).

   Ниже  описываются  некоторые   наиболее   распространенные
области применения микропрограммирования.



   Система команд большинства  современных  ЭВМ  обеспечивает
возможность решения широкого спектра задач. Она прежде  всего
включает в себя команды передачи  управления,  арифметические
(часто с несколькими форматами операндов), логические и  т.д.
Для решения специфических проблем традиционный  набор  команд
часто    оказывается     неэффективным.     С     динамически
микропрограммируемыми машинами  /14-16/  эти  проблемы  могут
быть облегчены с  помощью  языковых  процессоров.  Для  этого
нужно /14/:

   - определить  набор  машинных  команд,  наилучшим  образом
подходящий для данной специфической проблемы;

   - сгенерировать  микропрограммы  для  интерпретации  вновь
определенной системы команд.

   Список команд в микропрограммной ЭВМ может  быть  расширен
стандартными и часто выполняемыми операциями  или,  наоборот,
операциями, созданными для решения только одной  задачи.  Это
может быть просмотр и модификация таблиц,  сортировка,  вызов

подпрограмм и т.д.

   С появлением загружаемой управляющей памяти растет интерес
к использованию методов микропрограммирования у разработчиков
прикладных    программ,    которые    получили    возможность
оптимизировать  архитектуру  для  решения  своих   конкретных
задач. Применение этого подхода для  повышения  эффективности
решения такой специальной вычислительной задачи, как  быстрое
преобразование   Фурье,   дало   десятикратный   выигрыш    в
производительности  по  отношению  к   традиционным   методам
реализации вычислений /7/. Этот выигрыш объясняется тем,  что
аппаратура  ЭВМ  настраивалась   на   решение   именно   этой
конкретной задачи, так что  любое  изменение  задачи  требует
соответствующих изменений в аппаратуре или микропрограмме.

   В    /17-19/    рассматриваются    подходы    к    синтезу
микропрограммных поддержек программ, написанных  на  машинном
языке и  на  языке  высокого  уровня,  для  решения  проблемы
адаптации комплексов программ к вычислительным системам.

   Концепция динамически  изменяемой  ("аморфной")  машины  -
достаточно новая, и причиной ее возникновения является именно
микропрограммирование.

   Для  повышения  эффективности  ЭВМ   микропрограммирование
может  взять  на  себя  часть функций,   выполняемых   обычно
операционной  системой,  и  может  сделать   это   следующими
способами.

   1.Обеспечить  вызов  подпрограмм  по   таблице   начальных
адресов, размещенной в оперативной  памяти.  Это  могут  быть
макрокоманды, выполняемые  операционной  системой  (ОС),  или
подпрограммы  обработки  соответствующих  прерываний.   Таким
образом осуществляется гибкое взаимодействие через  табличные
переключатели между микропрограммным обеспечением  и  ОС  под
управлением последней.

   2.Простые и систематические операции, выполняемые обычно с
помощью относительно независимых  подпрограмм  супервизора  и
поддающиеся   микропрограммированию,   исполнить    в    виде
микропрограмм.   Это   могут   быть    программы    загрузки,
тестирования,  диагностики,   вычисления   тригонометрических
функций и т.д. Более того, ядро  базового  супервизора  также
может быть выполнено в виде микропрограммы.

   Все эти функциональные возможности   микропрограммирования
позволяют  рассматривать  его  как  расширение   программного

обеспечения  вычислительных  машин,   т.к.   это   становится
эффективным средством для организации  комплекса  программ  и
контроля  за  их   выполнением   /20/.   Для   микропрограмм,
написанных в дополнение  к  программному  обеспечению,  Оплер
/21/ предложил специальный  термин:  средства  специализациии
(firmware).

   Микропрограммирование  есть  средство,   сокращающее   так
называемый "семантический разрыв"  /13/  между  возможностями
аппаратных  средств  современных  ЭВМ,  с  одной  стороны,  и
программного обеспечения этих машин,  с  другой,  которое  во
многом  зависит  от  языков  программирования  и  от   класса
решаемых  задач,  т.е.  микропрограммная   машина   позволяет
улучшить   интерфейс   между   языками   программирования   и
аппаратурой.



           1.3.Микропрограммирование и эмуляция.


   Затраты на перепрограммирование  прикладных  программ  при
переходе  от  одной  системы  обработки   данных   к   другой
стимулировали  развитие  методов,  способных  упростить  этот
процесс.  Один  из  подходов   к   решению   этой   проблемы,
реализованный, например, в системе 360 фирмы IBM, заключается
в создании программно совместимых  семейств  ЭВМ,  каждая  из
которых  представляется  пользователю  совершенно  идентичной
другим членам семейства. Другой подход, называемый эмуляцией,
предполагает создание таких  технических  средств  в  системе
обработки  данных,   которые   позволили   бы   ей   работать
непосредственно с программой, написанной для  другой  системы
/7/.

   Микропрограммирование широко используется  при  разработке
аппаратных систем в целях упрощения процедуры эмуляции и  как
средство достижения общности архитектуры в широком  диапазоне
скоростей обработки данных. Процесс эмуляции,  выполненный  с
помощью аппаратной микропрограммной интерпретации кода других
машин, гораздо более эффективен по сравнению с методом  чисто
программной интерпретации. При условии того, что  эмулируемая
машина по разрядности  своего  ОЗУ  и  набору  арифметических
команд  не  превышает   возможностей   машины-интерпретатора,
потеря эффективности может быть сведена к минимуму.

   Впервые в СССР  в  ЭВМ  Наири-3  для  создания  эмуляторов
системы  команд  Минск-22,-23,  Раздан-3  была   использована

аппаратура  эмуляции,  тесно  связанная  с   микропрограммным
принципом построения устройства управления машиной /4/.

   Первое  интенсивное  использование   микропрограммирования
было использовано фирмой IBM при  построении  серии  ЭВМ  IBM
360. Проектирование этой серии машин происходило в два этапа:

   1.определение абстрактной машины;

   2.развитие   этой   машины    в    различных    физических
конфигурациях с использованием микропрограммирования.

   Было показано,  что  можно  имитировать  другую  машину  с
заданным  набором   ресурсов,   и   микропрограммирование   -
идеальное  средство  для  этого  /3/.

   В   /22/   описывается    архитектура    процессора    для
микропрограммной     эмуляции     аппаратно      выполненного
микропроцессора  Motorola  Corporation  MC6809,  в   /23/   -
эмуляция процессора Системы 360.

   Логическим следствием успеха эмуляции  существующих  машин
стала  попытка  имитировать  гипотетические  машины  и   даже
целевые ЭВМ, имеющие машинный язык высокого  уровня.  В  /24/
представлена  архитектура  микропрограммируемого   процессора
языка высокого уровня, в /25/ описываются работы по  созданию
специализированного РЕФАЛ - процессора ЕС2702, основанного на
микропрограммной реализации языка РЕФАЛ, что позволяет в 8-10
раз повысить  скорость  обработки  символьной  информации  по
сравнению  со  скоростью  работы  программной  РЕФАЛ-системы,
работающей на сопоставимой  аппаратуре  (ЕС1035).  В  /26,27/
описываются    различные    реализации     ЛИСП-машин,     от
микропрограммных  до  аппаратных  специализированных  ЛИСП  -
процессоров. В /28/ описывается  микропрограммный  ФОРТРАН  -
процессор,  предназначенный  для  использования  в   системах
приема и  отбора  информации  с  экспериментальных  установок
физики высоких энергий.

   В качестве  развития  этого  направленияе  появился  класс
очень  гибких  машин,  которые  поддерживают  широкий  спектр
различных   эмуляторов.   Такие   машины    часто    называют
универсальными эмуляторами. Примером  могут  быть  ЭВМ  B1700
фирмы Burroughs с микропрограммным уровнем общего назначения.
Они могут эффективно интерпретировать машины PDP-11, IBM  370
и  целый  ряд  других  вычислительных  систем,   предоставляя
возможность реализации  большого  разнообразия  архитектурных
решений /13,29/.


   Возможность микропрограммной  машины  модифицироваться  по
заданию  пользователя,  а  также  современные  достижения  по
эмуляции  языков  программирования  и  структур   виртуальных
процессоров, открывают совершенно новые области применения.



    1.4.Преимущества и недостатки микропрограммирования.


   Для данных  внешних  характеристик  (надежность,  скорость
вычислений, система команд и  т.д.)  выбор  между  аппаратным
управлением  и  микропрограммным  может  быть  сделан  путем
сравнения соответствующей стоимости каждого  решения.  В  /3/
показано,   что   после   достаточно   большого    начального
капиталовложения стоимость исполнения при расширении  системы
команд микропрограммными средствами увеличивается медленнее.

   В случае схемного управления быстродействие ограничивается
только характеристиками элементной базы. При микропрограммном
управлении быстродействие ограничивается временем обращения к
управляющей  памяти.  Современный   уровень   технологии   не
позволяет получить память, работающую столь  же  быстро,  как
логические   элементы,   поэтому   микропрограммные    машины
проигрывают в быстродействии.  Однако  стоимость  управляющих
логических   схем    примерно    пропорциональна    сложности
реализуемой  схемы  управления,  в  то  время  как  стоимость
устройств  с  микропрограммным  управлением  определяется   в
основном стоимостью запоминающих устройств и  практически  не
зависит в широких пределах от  сложности  логики  управления.
При  существующем  технологическом  уровне   микропрограммное
управление  уступает  схемному  по   быстродействию,   однако
обеспечивает большую гибкость и экономичность при  реализации
сложной управляющей логики.

   Микропрограммирование можно рассматривать с  разных  точек
зрения. С точки зрения инженера-проектировщика, чья задача  -
определение      и      реализация      системы       команд,
микропрограммирование есть  средство  решения  технических  и
экономических трудностей при обеспечении  машины  достаточным
набором машинных инструкций.  С  появлением  микропрограммных
устройств управления возникла тенденция иметь  все  больше  и
больше  машинных  инструкций,  и  микропрограммирование  есть
наиболее легкий способ их создания.

   Другая  точка  зрения  направлена  больше  на   реализацию
потребностей  языков  программирования  и  проблем   эмуляции

других машин. Этот  "программный"  подход  широко  использует
возможности, предоставляемые микропрограммированием.

   С практической точки  зрения  микропрограммная  реализация
системы команд также имеет ряд преимуществ. В первую  очередь
это  простой  способ  исправления  ошибок,  заключающийся   в
изменении отдельных разрядов управляющей памяти и играющий на
этапе наладки  очень  существенную  роль.  Кроме  того,  пока
система команд окончательно не установилась,  можно  изменить
функции отдельных команд, заменив одну микропрограмму  другой
или  загрузив  новую  микропрограмму  для   резервного   кода
операции. Можно значительно расширить  систему  команд,  т.к.
полное  число  кодов  операций  достаточно  велико.  Все  это
достаточно легко сделать,  т.к.  изменение  микропрограммного
обеспечения  не  сопровождается  затратами  на   изготовление
дополнительного оборудования, если не считать  потребность  в
запоминающих устройствах; в то же время изменение  аппаратных
средств   ЭВМ   сопряжено   с   определенными   материальными
затратами.

   Ниже  перечислен  ряд  наиболее  существенных  преимуществ
систем с микропрограммным управлением:

   - устройство управления более простое, более эффективное и
надежное, с более упорядоченной структурой;

   - легкость выполнения диагностики и обслуживания;

   - простой способ документирования и внесения  изменений  в
систему;

   - возможность  расширения   системных   спецификаций   для
включения новых возможностей;

   - уменьшение стоимости и времени  разработки,  возможность
автоматизации проектирования;

   - возможность применения в любой, даже самой простой  ЭВМ,
весьма обширного набора операций, включая  и  самые  сложные,
вплоть до операторов языков высокого уровня;

   - возможность   программной   совместимости   на    уровне
машинного   языка,   в    том    числе    малых    машин    с
высокопроизводительными;

   - возможность непосредственной адаптации, заключающейся  в
подборе архитектуры системы, исходя из требований  конкретной
задачи.

   Высокие  требования,   предъявляемые   к   разрабатываемым
современным ЭВМ, вызвали значительное увеличение числа команд

(до  400-500)  и  реализацию   на   уровне   команд   сложных
микропрограммных   алгоритмов.    Легкость    в    расширении
возможностей ЭВМ за счет увеличения  числа  команд  и  объема
микропрограммной  памяти  привела  к  усложнению  аппаратуры,
трудностям в тестировании и наладке ЭВМ /30/.

   В  ЭВМ  типа  RISC  (например,  IBM   801,   HP-Precision)
используется  другой  подход,  заключающийся  в  том,   чтобы
снизить "уровень сложности" команд, за счет  чего  упрощается
реализация и повышается быстродействие /30-32/. Основная идея
RISC  -  архитектуры  -  конвейерное  выполнение  команд  для
достижения скорости исполнения команды  за  один  цикл.  Если
сложные операции невыполнимы за один цикл, то они выполняются
на отдельной аппаратуре, либо разбиваются  на  более  простые
операции, каждая из которых реализуется одной командой.

   В последнее время  для  построения  высокопроизводительных
систем предпринимаются попытки объединить "элементарные"  ЭВМ
типа RISC с  идеями  параллельного  управления,  аналогичными
применяемым  в  микропрограммировании.  Одной  из  таких  ЭВМ
является проект VLIW (Very Large Instruction Word)  -  ЭВМ  с
очень   длинным   словом   команды    /30,33/.    Эффективное
использование   VLIW   возможно   только   с   использованием
компилятора, порождающего высокопараллельный код  из  обычных
последовательных программ.
