      V.Изменение архитектуры МКБ для эмуляции БЭСМ-6


         и другие применения микропрограммирования.

          5.1.Организация микропрограммного уровня


       для интерпретации одной или нескольких машин.

   В   общем   случае   эмулятор   -   это   аппаратные   или
микропрограммные средства для выполнения программ, записанных
в системе команд другой ЭВМ. Тогда эмуляция  есть  выполнение
вычислительной машиной этих программ /35/.

   Эмуляцию   можно   рассматривать    как    комбинированный
программно-аппаратный подход  к  моделированию,  имитирующему
функционирование некоторого  объекта  /1/.  Аппаратная  часть
может  состоять   из   дополнительных   логических   схем   в
эмулирующей машине, а также из микропрограммно  реализованных
добавлений и расширений. Таким образом, эмулятор строят путем
такого  расширения  аппаратуры  и  программного   обеспечения
моделирующей машины, которым обеспечивается включение  в  нее
некоторого отображения исходной машины.

   Организация   микропрограммного    уровня    может    быть
ориентирована на интерпретацию одной, нескольких или большого
числа  машин.  При  интерпретации  более,  чем  одной  машины
микропрограммный уровень должен иметь  соответствующее  число
микропрограмм.  Микропрограммы  для  интерпретации   "чужого"
традиционного машинного уровня  также  называются  эмулятором
/29/.  В  вычислительной  машине,  имеющей   микропрограммный
уровень,  ориентированный  на  интерпретацию  большого  числа
машин,  такое  понятие  не  имеет   смысла,   т.к.   "своего"
традиционного машинного уровня не существует.

   Имеется много примеров эмуляции: IBM 7090  эмулируется  на
модели 65 Системы 360, Система 1620 эмулируется на модели  20
Системы 360 /1/. Архитектура микропрограммного уровня Системы
370  позволила  достигнуть  высокой  производительности   для
традиционного машинного уровне Системы 370, а  также  моделей
1401 и 7094 фирмы IBM.

   Центральные процессоры IBM никогда не предназначались  для
выполнения   микропрограмм,    интерпретирующих,    например,
программы Cyber-70, и они не подходят для этой цели. В то  же
время  для  ЭВМ  В1700   фирмы   Burroughs   был   разработан
микропрограммный  уровень  общего  назначения.   Без   особых
затруднений он может интерпретировать  программы,  написанные
на машинном языке Системы 370, PDP-11,  Cyber-70  или  других

машин. Вследствие своей универсальности этот микропрограммный
уровень  не  так  эффективен,  например,  при   интерпретации
программ  Системы  370,  как  центральные   процессоры   IBM,
специально разработанные для этой цели.

   Для  успешной  разработки  эмулятора   необходимо   решить
следующие задачи /1/:

   1)обеспечить на эмулирующей  машине  отображение  исходной
машины, в частности:

      - оперативной памяти,

      - системы ввода-вывода,

      - регистров,  триггеров,  счетчиков  и  всех  остальных
   средств исходной машины, которые адресуются в программе;

   2)выбрать группу машинных команд  для  расширения  системы
команд эмулирующей машины;

   3)обеспечить   полную    независимость    режима    работы
эмулирующей машины и режима эмуляции с тем,  чтобы  сохранить
архитектурную  совместимость  между  эмулирующей  машиной   и
другими моделями этого семейства;

   4)разработать эффективную операционную систему,  в  рамках
которой могла бы работать любая  моделирующая  программа  или
эмулятор.



                  5.2.Эмуляция ЭВМ БЭСМ-6.


   К главным  особенностям  эмулятора  БЭСМ-6  можно  отнести
следующие его черты /60/:

   1)однотипный способ распределения памяти как в МКБ, так  и
в БЭСМ-6, с точностью до размера адресного пространства;

   2)регистры и режимы работы, доступные программе  в  режиме
математика, в МКБ те же, что и в БЭСМ-6;

   3)добавлено   46   специальных    команд,    реализованных
микропрограммно, для прямой эмуляции команд БЭСМ-6  в  режиме
математика;

   4)имеются    определенные    различия    во     внутреннем
представлении   команд   и   данных,   связанные   с   разной
разрядностью машинного слова.

   Для  достижения  максимального   сходства   при   эмуляции
необходимы специальные средства, исполняющие  так  называемый
"интерпретирующий цикл" /1/. Он заключается в манипуляциях со
счетчиком команд,  в  вычислениях  исполнительного  адреса  и
преобразовании его в физический адрес памяти, в интерпретации

кода  моделируемой  операции   и   передаче   управления   на
соответствующую эмуляционную микропрограмму.

   Поскольку МКБ создавалась как БЭСМ-подобная ЭВМ  с  учетом
возможности  эмуляции  БЭСМ-6,  необходимость  в  этом  цикле
отпала,   т.к.   все   перечисленные   операции   выполняются
аналогично как в МКБ, так и при эмуляции БЭСМ-6.

   Вопросы  разработки  операционной  системы  и  отображение
системы ввода-вывода БЭСМ-6 выходит за рамки  данной  работы.
Решение этих проблем описано в /69,70/.



  5.2.1.Микропрограммный уровень МКБ для эмуляции БЭСМ-6.


   Количество аппаратуры  специально  для  реализации  режима
эмуляции  (РЭ)  БЭСМ-6  очень  незначительно  и  сводится   в
основном к схеме выделения адреса, номера  индекс-регистра  и
кода операции команды  в  стандартизаторе  команд,  поскольку
разрядность слова и форматы команд различны. Кроме этого, для
РЭ есть отдельный  переключатель  по  коду  операции  команды
(ПНА) для выбора последовательности микрокоманд (рис.9).  Все
остальное реализуется микропрограммно.

   Выбор режима декодировки команды в стандартизаторе  команд
и выбор соответствующего ПНА осуществляется с помощью разряда
регистра   режимов   МКБ.   Смена    режима    осуществляется
привилегированными командами  под  управлением  ОС.  Один  из
разрядов тега также  содержит  признак  режима.  При  выборке
операнда или команды с разными значениями  режима  происходит
внутреннее  прерывание,  если  оно  не  заблокировано.

   Таким образом  осуществляется  полная  независимость  этих
двух режимов работы ЦП и их  эффективное  взаимодействие  под
управлением ОС.  Появляется  возможность  работы  программ  в
смешанном режиме,  когда  программа  основного  режима  может
вызвать программу режима эмуляции в пределах одного процесса.



        5.2.2.Традиционный машинный уровень БЭСМ-6.


   ПРЕДСТАВЛЕНИЕ ЧИСЕЛ БЭСМ-6. Длина слова в основном  режиме
на 16 разрядов больше, чем в РЭ. Следовательно, при  эмуляции
БЭСМ-6 появляется  возможность  считать  в  режиме  БЭСМ-6  с
точностью  основного  режима.  Для  этого  необходимо,  чтобы
граница между мантиссой и порядком в  основном  режиме  и  РЭ
совпадали. 48-разрядное число  БЭСМ-6  получается  из  общего
представления усечением старших 4 разрядов порядка и  младших

12  разрядов   мантиссы.   Поэтому   "лишние"   16   разрядов
распределились следующим образом: 4 разряда - на месте  60-63
разрядов для увеличения диапазона порядков, остальные 12 - на
месте  младших  разрядов  для  увеличения  точности  мантиссы
(рис.14а.).



     64 63         54 53 52                               1
     ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
     ┃ │             │ │                                   ┃
     ┃ │   порядок   │ │         м а н т и с с а           ┃
     ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
      │               │
      ↓               ↓
а).  знак порядка    знак мантиссы
      ↑               ↑
      │               │
     ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
     ┃ │     │       │ │                        │          ┃
     ┃ │xxxxx│порядок│ │     м а н т и с с а    │xxxxxxxxxx┃
     ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
     64 63 60 59   54 53 52                   1  12       1
     64 63..60 59    ...     37 36    ...     13 12  ...  1
     ┏━━│━━━━━│━━━━━━━━━━━━━━━━│━━━━━━━━━━━━━━━━━│━━━━━━━━━┓
     ┃  │     │                │                 │         ┃
б).  ┃ле│xxxxx│  вая команда   │ правая команда  │xxxxxxxxx┃
     ┃  │     │                │                 │         ┃
     ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
Рис.14.а).Представление чисел с плавающей запятой в РЭ.
       б).Формат команд эмулятора БЭСМ-6.
   Такое представление дает возможнсть:

   а)производить арифметические операции одинаковым  способом
(в основном по одним и тем же микропрограммам) как в основном
режиме, так и в режиме эмуляции БЭСМ-6;

   б)расширять  диапазон  порядков  и  увеличивать   точность
вычислений в режиме эмуляции.

   Режим увеличения точности в РЭ задается  значением  одного
из разрядов регистра режимов ЦП, т.е. в режиме  БЭСМ-6  можно
считать, используя 48  разрядов  или  64.  Управление  числом
разрядов необходимо. т.к.  в  процессе  переноса  программ  с
БЭСМ-6 на МКБ выяснилось, что некоторые из них при повышенной
точности работают  неверно.  Это  касается  программ,  неявно
использующих конкретную разрядность машинного слова.

   ФОРМАТ КОМАНД ЭМУЛЯТОРА БЭСМ-6. Длина каждой команды в  РЭ
- 24 бита (рис.10б.). Структура команды -  такая  же,  как  у
БЭСМ-6. Размещаются 2 команды в одном  64-разрядном  слове  в
тех же позициях, что и числа. Это решение  продиктовано  тем,
что  многие  программы  БЭСМ-6  занимаются  самомодификацией.
Более  того,  иногда  запись  команд   производится   обычной
командой записи с предварительной  установкой  режима  записи

команд.

   В  режиме  эмуляции  БЭСМ-6  из  адресной  части   команды
используются только младшие 15 разрядов.

   Система  команд  БЭСМ-6  является  подмножеством   системы
команд основного режима. Формирование  кодов  операций  (КОП)
происходит  при  выборке   команды.   Стандартизатор   команд
анализирует 7-й разряд короткоадресного КОП в режиме эмуляции
и в зависимости от его значения дополняет адресную часть  "0"
или "1" в 15÷13 разрядах, как это принято в БЭСМ-6.



         5.2.3.Особенности исполнения команд в РЭ.


Логические команды. Эмуляция арифметики с плавающей запятой.


   Повышение точности возможно при выполнении команд БЭСМ-6 в
РЭ с 64-разрядными числами с плавающей запятой. С  повышением
точности в РЭ  связаны  определенные  трудности  в  операциях
смешанной арифметики, когда результат в формате  с  плавающей
запятой употребляется в качестве операнда логических  команд.
При этом возможны потери "сильно значащих" разрядов  порядка.
Чтоб этого  избежать,  в  микропрограммах  логических  команд
делается проверка операндов на допустимость использования  их
в логических командах. Но проверка  "правильности"  операндов
не всегда обязательна. Если про программу известно,  что  она
не пользуется  "запрещенными  приемами",  проверку  операндов
можно блокировать. Это дает ускорение до 15% в зависимости от
частоты использования логических команд.

   Арифметические команды в РЭ БЭСМ-6 выполняются так же, как
и  в  основном  режиме  (практически  по  одним  и   тем   же
микропрограммам).  Правила  округления   и   нормализации   с
точностью до возможностей реализации те же  самые,  что  и  в
БЭСМ-6. Правильность выполнения команд БЭСМ-6, в том числе  и
операций умножения и деления, подтверждает тот факт,  что  на
МКБ в режиме эмуляции работает тест проверки  арифметического
устройства и устройства управления, существущий  для  системы
команд БЭСМ-6 /71/.



                5.3.Эмуляция ЭВМ Эльбрус-Б.


   Эльбрус-Б и МКБ  являются  БЭСМ-подобными  машинами.  Хотя
техническое исполнение их  совершенно  различное,  на  уровне
пользователя  у  них   много   общего.   Поэтому   реализация
архитектуры Эльбрус-Б  и,  в  частности,  системы  команд  не

представляет сложности.

   В Эльбрус-Б  введено  ряд  новых  по  сравнению  с  БЭСМ-6
команд, имеющих коды 00Н - 7FН в  основном  и  дополнительном
форматах. Такие же коды для них зарезервированы в МКБ.  Новые
команды МКБ-8601  имеют  соответственно  коды  80Н  -  FFН  в
основном и дополнительном форматах, чтобы не  пересекаться  с
кодами команд ЭВМ Эльбрус-Б. Одинаковые команды  Эльбрус-Б  и
МКБ-8601,  существующие  только   в   новом   режиме,   имеют
одинаковые коды.

   При разработке эмулятора Эльбрус-Б возникают  определенные
трудности, связанные с различием в системе  команд  и  других
архитектурных особенностях.  Примером  может  быть  групповой
режим исполнения команд Эльбрус-Б, при котором любые 1 или  2
команды выполняются  столько  раз,  какое  число  занесено  в
специальный регистр при установке группового режима. При этом
отсутствует  фаза  выборки  командного  слова.   Этот   режим
полностью   отличается   от принятых    правил    организации
последовательности исполнения команд в МКБ, и реализация  его
достаточно  сложна  на  микропрограммном  уровне.  В  этом  и
подобных  случаях  для  интерпретации  можно  воспользоваться
экстракодами.



          5.4.Работа в реальном масштабе времени.


   Микропрограммирование   можно   использовать   для   целей
обслуживания  и  для  целей  управления  в   так   называемых
"системах с непосредственной связью" (ON-LINE)  и  "системах,
работающих в реальном масштабе времени" (REAL-TIME) /72/. Это
могут быть микропрограммные мини-ЭВМ,  где  взаимодействие  с
соответствующим  оборудованием   осуществляется   на   уровне
команд.     При     этом     возможности,     предоставляемые
микропрограммированием,   используются   недостаточно,    что
связано с трудностями изменения микропрограммного уровня.

   Распределенные  вычислительные  системы  централизованного
типа состоят из двух или более ЭВМ. В этих  системах  главная
ЭВМ занимается только обработкой результатов.  Другие,  менее
мощные  ЭВМ,  одна  или  больше,   находятся   на   линии   с
оборудованием и  занимаются  сбором  и  первичной  обработкой
информации. В качестве этих  последних  могут  использоваться
микропрограммные  процессоры,  или  контроллеры,   специально
разработанные для этой цели.


   Так,    например,    в    /28/     приводится     описание
микропрограммируемого Фортран - процессора,  машинным  языком
которого   является   промежуточный    код,    вырабатываемый
компилятором   с   Фортрана.   Процессор   предназначен   для
использования в системах сбора информации в установках физики
высоких энергий.

   В /64,65,73/ описывается микропроцессорный контроллер М-16
с микропрограммным управлением.  М-16  выполнен  в  стандарте
КАМАК  и  предназначен  для  работы  в  системе  контроля   и
управления   каналами    пучков    заряженных    частиц    на
синхрофазотроне ОИЯИ. Исходными данными  в  этой  и  подобных
системах является аналоговая информация о значениях  токов  в
магнитооптических элементах канала и дискретная информация  с
детекторов  ядерного   излучения,   содержащая   координатные
характеристики пучка частиц.

   Можно отметить следующие характерные особенности  подобных
разработок /77/.

   - Выполняются  они  в  общих  стандартах  с   аппаратурой,
связанной с экспериментальными установками (например, КАМАК).
Благодаря этому, существует простая и эффективная возможность
использовать все разработанное в этом стандарте оборудование:
различные функциональные блоки связи с установками,  а  также
интерфейсы внешних устройств.

   - Микропроцессорный  контроллер,  как  правило,  не  имеет
своих внешних устройств, т.к. он связан либо с  главной  ЭВМ,
либо  управляет  некоторым   устройством   через   интерфейс,
выполненный в стандарте КАМАК.

   - При разработке используются готовые  микропроцессоры  со
встроенной    системой    команд,    либо     микропроцессоры
секционированного     типа     с      применением      метода
микропрограммирования, что позволяет конструировать с помощью
микропрограмм ту архитектуру, которая  более  всего  подходит
для конкретной задачи.

   Особенности    микропрограммного    уровня     при     его
использовании в разработках микропроцессорных контроллеров:

   - отсутствие  внешних  устройств  позволяет   использовать
синхронный протокол обмена с ОЗУ,  при  котором  цикл  обмена
удается выполнить за один такт микропрограммы;

   - для  быстрого  съема  данных  управлять   циклом   КАМАК
непосредственно  из  микропрограммы;


   - иметь  сравнительно  небольшую   длину   микрокомандного
слова;

   - входными данными для  предварительного  отбора  событий,
при котором не требуются сложные вычисления,  являются  целые
числа  в  диапазоне  от  нуля  до  нескольких  тысяч  (номера
проволочек, величины сигналов с кодировщиков и т.д.), поэтому
реализуется только целочисленная арифметика.

   Основная проблема - отсутствие  программного  обеспечения,
но  ее  можно  решить,  выбрав  систему  команд,  позволяющую
использовать  программы,  создаваемые  на   другой   ЭВМ.

   В некоторых случаях можно использовать  программу  в  виде
последовательности  одних  только   микрокоманд.   При   этом
ненужными становятся выборка и дешифровка  команды.  Примером
может служить процессор 168/E с очень  простой  структурой  и
высоким быстродействием, используемый на  многих  ускорителях
/74/.

   В   динамически   программируемых    машинах    управление
экспериментальными  и  технологическими   установками   более
эффективно       осуществляется       при       использовании
микропрограммирования. Для  увеличения  реактивности  системы
можно   добавить   специальные   команды,    а    если    ЭВМ
взаимодействует с оборудованием  при  помощи  прерываний,  их
можно  также   частично   или   полностью   обрабатывать   на
микропрограммном уровне. Оба эти способа можно использовать в
МКБ-8601.

   Хорошие  вычислительные  возможности  МКБ  и   способность
работать  в  мультипрограммном  режиме  позволяют   создавать
системы на ее основе одновременно для съема и  для  обработки
экспериментальных результатов. Программы съема могут работать
от  прерываний,   сигнализирующих   о   наличии   информации.
Программы обработки могут работать  в  оставшееся  время  как
фоновые задачи.

   Возможны  два   способа   подключения   экспериментального
оборудования к МКБ.

   1.Пультовой процессор связан  с  IBM/PC  по  параллельному
каналу. В макетном образце эта линия связи  используется  для
загрузки программ и микропрограмм в ОЗУ. Эту же  линию  связи
можно использовать для доступа ко всем устройствам, связанным
с IBM/PC,  в  том  числе  и  к  физическим  установкам  через
стандартный интерфейс.


   2.Для подключения устройств  непосредственно  к  шине  МКБ
нужна   разработка   либо   контроллера   устройства,    либо
переходника  с  шины  МКБ   на   стандартную   шину   с   уже
разработанными контроллерами.



   5.5.Подбор длительности такта. Производительность ЭВМ.


   Типы   микроопераций,   выполняемые   в    каждом    такте
микропрограммы,  различные  и  требуют  разного  времени  для
своего  исполнения:  от  минимального  (времени   определения
адреса  управляющей  памяти  и   выборки   микрокоманды)   до
максимального  (времени  замены  математической  страницы  на
физическую   и   различных   проверок    при    возникновении
прерываний).

   При постоянной  длительности  микропрограммного  такта  ее
принимают равной некоторой средней величине, разбивая длинные
операции   на   несколько   микрокоманд.    Возможно    также
длительность  такта   сделать   микропрограммно   управляемой
величиной, выделив специальное поле в  микрокомандном  слове.
При этом удается более точно  подобрать  длительность  такта,
приблизив ее к оптимальной.

   В микропрограммном слове МКБ предусмотрено поле,  задающее
длительность   микропрограммного   такта,    которая    может
изменяться от 150 до  500  нсек.  с  шагом  в  50  нсек.  Для
упрощения процедуры наладки макетного образца  (аппаратуры  и
микропрограмм) сначала использовалось  максимальное  значение
длительности такта. В дальнейшем  были  написаны  специальные
тесты для определения  длительности  такта  в  микрокомандах,
проверяющие все типы пересылок и операций  с  самыми  разными
операндами. Затем значения длительности такта, определенные с
помощью этих тестов, заносились в  готовые  микропрограммы  и
проверялись на тестах командного уровня.

   Значения этих величин зависят от  технологии  изготовления
машины.  Технологии  изготовления   макетного   образца   МКБ
(двухсторонний печатный монтаж)  и  заводского  (многослойные
платы) разные, поэтому возможны отличия длительности такта  в
одних и тех же микрокомандах.

   На  максимальной  длительности  такта  макетного   образца
скорость исполнения логических команд около 200 тыс. операций
в секунду. После проведения  процедуры  подбора  длины  такта
скорость  исполнения  увеличивается  от  12%   до   18%   для

логических  команд  (в  логических  командах  основное  время
занимает  выборка  операнда,  которая  от  длины   такта   не
зависит).

   Известно,    что    скорость    исполнения    команд     в
микропрограммных    ЭВМ     невысока,     а     эффективность
микропрограммирования  в  основном  заключается  в  настройке
микропрограммного уровня под конкретную задачу.

   При  изучении  вопроса   /1/   о   возможности   повышения
производительности  с   помощью   микропрограммирования   для
некоторых моделей Системы 360  фирмы  IBM  сделаны  следующие
выводы.

   1.Использование   микропрограммирования   существенно   не
улучшает внутренние циклы таких математических программ,  как
вычисление полиномов  или  скалярных  произведений  векторов.
Медленные в принципе арифметические операции нельзя  ускорить
за счет микропрограммной реализации составляющих их операций,
так как экономия на времени выборки команд  составляет  малую
долю от общего времени их исполнения.

   2.Наиболее эффективно использование  микропрограммирования
в программах с большим числом  логических  операций,  которые
необходимы, например, для обработки  списков.  Возможно,  что
производительность   компилятора   может   быть   значительно
повышена за счет микропрограммной реализации  многих  из  его
часто используемых подпрограмм.

   Эти   выводы   применимы   к   большинству   универсальных
вычислительных   машин   с   микропрограммным    управлением.
Получаемый выигрыш зависит от  числа  параллельно  работающих
логических схем, выполняющих операции в одном машинном цикле.
Следующий фактор, влияющий на  повышение  производительности,
это  сокращение  числа  обращений  к  памяти  за   командами.
Дополнительная экономия получается  в  результате  устранения
обращений  к  памяти,  связанных  с   записью   промежуточных
результатов.  Микропрограммирование  позволяет   использовать
внутреннюю  память  процессора  (аппаратные   регистры)   для
хранения промежуточных результатов.

   В табл.1 приведены примеры использования микропрограммного
уровня в МКБ для нужд ОС и для  повышения  ее  эффективности.
Для сравнения примерное число микрокоманд в команде  -  около
10. В  скобках  приводится  число  микрокоманд  для  переписи
содержимого регистра и  таймера  счетного  времени  процесса,

входящее в общее  число  микрокоманд.  Доступ  к  регистру  и
таймеру  занимает  значительное   время,   т.к.   микросхема,
используемая в часах и таймерах, более медленная, в то  время
как для доступа к другим  регистрам  требуется  не  больше  2
микрокоманд.

   Таблица показывает результат целенаправленных действий  по
организации  микропрограммной  поддержки  важнейших   функций
операционной системы. Так, смена процесса в ЦП, требовавшая в
диспетчере  ОС  "Дубна"  116  команд,   в   МКБ   исполняется
микропрограммой из 156 микрокоманд, т.е. около 15 "команд"  в
привычном "командном"  исчислении.  При  достигнутом  среднем
соотношении быстродействия 4:1 ряд системных  функций  в  МКБ
выполняется даже быстрее, чем в БЭСМ-6.




┌──────────────────────┬──────┬──────────────────────┬──────┐
│                      │      │                      │число │
│                      │число │                      │      │
│    операция БЭСМ-6   │      │   операция МКБ-8601  │микро-│
│                      │команд│                      │      │
│                      │      │                      │команд│
│                      │      │                      │      │
┌──────────────────────┬──────┬──────────────────────┬──────┐
│                      │      │                      │      │
│"малое упрятывание"для│  13  │микропрограмма входа в│  90  │
│                      │      │                      │      │
│минимальной обработки │      │прерывание, включающая│      │
│                      │      │                      │ (40) │
│прерываний            │      │полное упрятывание    │      │
│                      │      │                      │      │
│                      │      │регистров и запись    │      │
│                      │      │                      │      │
│полное упрятывание    │  25  │информации о прерваном│      │
│                      │      │                      │      │
│регистров при         │      │процессе в регистры   │      │
│                      │      │                      │      │
│прерываниях           │      │процесса обработки    │      │
│                      │      │                      │      │
│                      │      │прерывания            │      │
│                      │      │                      │      │
│уточнение места       │10-15 │                      │      │
│                      │      │                      │      │
│прерывания            │      │                      │      │
│                      │      │                      │      │
┌──────────────────────┬──────┬──────────────────────┬──────┐
│                      │      │                      │      │
│"малое" восстановление│  13  │возврат из прерывания │  66  │
│                      │      │                      │      │
│регистров после       │      │с полным восстановле- │ (43) │
│                      │      │                      │      │
│прерывания            │      │нием содержимого      │      │
│                      │      │                      │      │
│                      │      │регистров             │      │
│                      │      │                      │      │
│полное восстановление │  25  │                      │      │
│                      │      │                      │      │
│регистров после       │      │                      │      │
│                      │      │                      │      │
│прерывания            │      │                      │      │
│                      │      │                      │      │
┌──────────────────────┬──────┬──────────────────────┬──────┐
│                      │      │                      │      │
│"малое упрятывание"для│  13  │микропрограмма входа в│  57  │
│                      │      │                      │      │
│экстракода            │      │экстракод с передачей │      │
│                      │      │                      │      │
│                      │      │полной информации о   │      │
│                      │      │                      │      │
│                      │      │процессе, вызвавшем   │      │
│                      │      │                      │      │
│                      │      │экстракод             │      │
│                      │      │                      │      │
┌──────────────────────┬──────┬──────────────────────┬──────┐
│                      │      │                      │      │
│восстановление        │  13  │команда возврата из   │  14  │
│                      │      │                      │      │
│регистров после       │      │экстракода            │      │
│                      │      │                      │      │
│экстракода            │      │                      │      │
│                      │      │                      │      │
┌──────────────────────┬──────┬──────────────────────┬──────┐
│                      │      │                      │      │
│смена процессов       │ 116  │смена процессов       │ 156  │
│                      │      │                      │      │
│в том числе:          │      │в том числе:          │      │
│                      │      │                      │      │
│-упрятывание регистров│  25  │-микропрограмма входа │  90  │
│                      │      │                      │      │
│ прерванного процесса │      │ в прерывание         │      │
│                      │      │                      │      │
│-восстановление       │  66  │-возврат из прерывания│  66  │
│                      │      │                      │      │
│ регистров приписки   │      │                      │      │
│                      │      │                      │      │
│-восстановление регис-│  25  │                      │      │
│                      │      │                      │      │
│ тров нового процесса │      │                      │      │
│                      │      │                      │      │
┌──────────────────────┬──────┬──────────────────────┬──────┐
│                      │      │                      │      │
│учет обращения к одной│ 160  │учет обращения к одной│  19  │
│                      │      │                      │      │
│странице памяти       │      │странице памяти       │      │
│                      │      │                      │      │
│в том числе:          │      │                      │      │
│                      │      │                      │      │
│-упрятывание и восста-│  60  │                      │      │
│                      │      │                      │      │
│ новление регистров   │      │                      │      │
│                      │      │                      │      │
│-коррекция списка, сня│ 100  │                      │      │
│                      │      │                      │      │
│ тие защиты страницы  │      │                      │      │
│                      │      │                      │      │
╶───────────────────────────────────────────────────────────╴
   Табл.1. Выполнение некоторых операций в БЭСМ-6 и МКБ-8601.



              Заключение. Основные результаты.

   1.Разработана  методика  создания  и   настройки   ЭВМ   с
использованием   микропрограммирования,    заключающаяся    в
проверке  архитектуры  на   программных   моделях,   создания
комплекса микропрограммных средств для  обеспечения  заданной
архитектуры  и  модификации   микропрограмм   при   изменении
архитектуры ЭВМ с целью настройки ее  на  решение  конкретных
задач. Вклад автора в эти работы кроме специально оговоренных
мест является определяющим.

   При этом:

      - для изучения архитектуры разрабатываемой ЭВМ  создана
   программа-имитатор,   которая   является   также    частью
   кросс-системы подготовки программ;

     - проведено      логическое      моделирование      всех
   функциональных узлов ЦП МКБ-8601 с целью его исследования;
   моделирование процессора в целом, когда  управление  всеми
   компонентами модели происходит  из  памяти  микропрограмм,
   осуществлялось диссертантом;

      -   разработан   микропрограммный   уровень   МКБ   для
   реализации системы команд, экстракодов и прерываний;

      - создан комплекс микропрограммных тестов,  позволяющий
   проверить все функциональные блоки создаваемой ЭВМ.

   2.На  основании  этой  методики  была   спроектирована   и
построена ЭВМ МКБ-8601,  которая  кроме  основного  режима  с
расширенным списком команд может работать  в  системе  команд
ЭВМ БЭСМ-6, т.е. эксплуатировать  практически  весь  комплекс
программных средств,  существующих  для  этой  ЭВМ.  Возможно
совмещение основного режима и режима БЭСМ-6 в пределах  одной
программы.

   3.Разработанная    ЭВМ     имеет     структуру,     хорошо
приспособленную для решения вычислительных задач. Ее  система
команд  совместима  с  вычислительной   системой   Эльбрус-Б,
поэтому МКБ-8601 можно использовать для создания программ для
ЭВМ Эльбрус-Б.

   4.Архитектура МКБ-8601  создана  с  использованием  метода
микропрограммирования,   причем   обеспечены   аппаратные   и
программные средства  увеличения  набора  микропрограмм.  Это
позволяет  расширять  возможности  ЭВМ  в   соответствии   со
спецификой определенного класса задач. Например, выносить  на
микропрограммный      уровень       часто       повторяющиеся

последовательности команд.

   5.Обработка   прерываний   на   микропрограммном    уровне
позволяет обеспечить быструю реакцию при работе ЭВМ на  линии
с  экспериментальным  и  технологическим  оборудованием.  Это
доказывает   целесообразность   применения   микропрограммных
методов   при   создании   управляющей   и    диагностической
аппаратуры.

   6.Микропрограммно  реализована  арифметика   с   плавающей
запятой для режима  эмуляции  БЭСМ-6,  позволяющая  проводить
вычисления с большей  точностью  и  в  расширенном  диапазоне
порядков.

   7.Реализована  аппаратно  -   микропрограммная   поддержка
многопроцессорного режима работы с помощью семафорных  команд
и мультипрограммного  режима  с  использованием  регистрового
пула, обеспечивающая быстрое переключение процессов.

   8.Впервые на микропрограммном уровне реализован  созданный
в ОИЯИ алгоритм пересчета приоритетов страниц  для  поддержки
управления памятью.

   9.Для    заводского    изготовления    ЭВМ    подготовлена
документация и передана в НПО "Радиоприбор", г.Москва.



   В заключение автор выражает глубокую  благодарность  своим
научным руководителям И.Н.Силину и Ф.В.Левчановскому, а также
коллегам по работе за постоянное внимание и ценные советы  на
всех этапах работы.
