
 IV.Принципы организации микропрограммного обеспечения МКБ.


              4.1.Организация системы команд.


     Команды поддержки системных и прикладных программ.


   Микропрограммное  обеспечение  МКБ  реализует   выполнение
команд, вызов системных макрокоманд - экстракодов и поддержку
прерываний  /60/.  Оно   состоит   из   большого   количества
совершенно  независимых  микропрограмм,  каждая  из   которых
соответствует  отдельно  взятой  команде,   включая   команды
входа/возврата  в  экстракод  и  в  прерывания.  Связи  между
отдельными микропрограммами нет. Микропрограмма  "не  знает",
какая  из  них  работала  раньше,  и  кому   будет   передано
управление.   После   выполнения   своих    функций    каждая
микропрограмма возвращает ЦП в исходное состояние.



                           ┌───────────────┐
                           │               │
                           │ инициализация │
                           │               │
                           └───────┬───────┘
                                   │
                 ↑────────────────→│
                 │
                 │         ┌───────↓───────┐
                 │         │ выборка машин-│
                 │         │               │
                 │         │ной инструкции │
                 │
                 │         └───────┬───────┘
                 │                 │
                 │
                 │         ┌───────↓───────┐
                 │         │ декодирование │
                 │         │               │
                 │         │  инструкции   │
                 │
                 │         └───────┬───────┘
                 │                 │
           ╌╌╌╌╌╌╌╌╌╌╌╌      ╶─────↓──────
          ╎            ╎    /             \ нет
          ╎ прерывания ╎         нужен
          ╎            ╎   /               \╶─→│
                           \    операнд?   /   │
           ╌╌╌╌╌╌╌╌╌╌╌╌                        │
                 │          \             /    │
                 │           ╶─────┬─────╴     │
                 │                 │           │
                 │                 │да         │
                 │                             │
                 │         ┌───────↓───────┐   │
                 │         │    выборка    │   │
                 │         │               │   │
                 │         │    операнда   │   │
                 │                             │
                 │         └───────┬───────┘
                 │                 │           ↓
                 │                 │←──────────╴
                 │
                 │         ┌───────↓───────┐
                 │         │   выполнение  │
                  ←────────┐               │
                           │   инструкции  │
                           └───────────────┘
            Рис.11. Схема исполнения команды в ЭВМ.
   Схема исполнения команды (командный цикл)  аналогична  для
всех типов машин как с микропрограммным,  так  и  со  схемным
управлением и представлена на рис.11  /3/  (схема  исполнения
команд в МКБ несколько сложнее в силу размещения двух  команд
в слове, но для настоящего рассмотрения  это  несущественно).
После инициализации блок  управления  ЭВМ  выбирает  машинную
инструкцию, декодирует ее, выбирает требуемые операнды, чтобы

заданная инструкция могла быть исполнена, и  затем  выполняет
ее. Это может быть арифметическая  или  логическая  операция,
команда пересылки данных из памяти в регистр или  наоборот  и
т.д.

   Система команд МКБ существенно расширена  по  сравнению  с
БЭСМ-6. Одна из причин большого количества команд заключается
в том, что в пределах размеров  ПНА  и  памяти  микропрограмм
скорость определения  адреса  микропрограммы  не  зависит  от
числа  команд.  В  связи  с  этим  с  точки  зрения  скорости
исполнения  и  объема  памяти  микропрограмм  лучше   завести
достаточное  количество  однотипных  команд,   работающих   с
различными  форматами  данных,  чем   иметь   одну   команду,
анализируя тип данных отдельно (как сделано, например, в  ЭВМ
"Эльбрус", где типы данных  хранятся  в  теге).  Более  того,
поскольку введение новой команды  не  требует  дополнительной
аппаратуры, кроме некоторого объема памяти  микропрограмм,  а
наличие ее способствует повышению эффективности  программного
обеспечения и ЭВМ в целом, в МКБ введена дополнительно группа
команд поддержки  системных  и  прикладных  программ.  Полный
список  команд  МКБ-8601  и   правила   установки   признаков
результата приведены в приложении Б.

   Команды машинного уровня можно разделить  на  две  группы:
команды общего и специального назначений.

   Команды общего назначения предназначены для решения  самых
разных  задач.  Применение  команд  специального   назначения
весьма  ограничено.  Например,  в  немногих   задачах   можно
эффективно использовать команду подсчета количества единиц  в
регистре или определение номера старшей единицы. Эти  команды
существовали в  БЭСМ-6  и  сохранены  в  МКБ.  Причина  этого
заключается не только в обеспечении преемственности, но также
и в том, что эти  команды  очень  эффективны  при  вычислении
координат треков частиц в физике высоких энергий и  в  других
аналогичных задачах.

   Кроме того, в  языках  высокого  уровня  и  в  современных
программных системах часто используются  не  целые  слова,  а
более мелкие единицы информации.  В  /30/  из  анализа  типов
операндов прикладных программ ЭВМ  серии  PDP-11  был  сделан
вывод,   что   в   состав   аппаратурно   и   микропрограммно
поддерживаемых типов операндов должны быть включены следующие
типы:   битовый,   байтовый,   словарный    (16    разрядов),

операнд-двойное слово (32 разряда). И хотя обмен между  ЦП  и
ОЗУ в МКБ всегда идет полным 64-разрядным  словом,  выделение
части слова на микропрограммном уровне присходит  значительно
быстрее,  чем  если  бы  то  же  самое  делалось  обычными(*)
командами.   Поэтому в  систему  команд  МКБ  были  добавлены
команды работы с частями слова -  полусловами,  16-разрядными
фрагментами, байтами и битами (для работы со шкалами).

(*) Примечание: При переводе любого алгоритма с языка машинных команд
на микропрограммный, в том числе и алгоритма выделения  части
слова,    каждая    команда    заменяется     соответствующей
микропрограммой.  Обычно   микропрограмму   удается   сделать
короче, т.к. отсутствует фаза выборки команд и имеется больше
возможностей  для    параллельного    исполнения    отдельных
микроопераций. В некоторых случаях  одна  команда  заменяется
одной микрокомандой.

   В /30/ приводятся результаты измерения частоты имеющихся в
системе   команд   инструкций   ЭВМ   PDP-10.    Исследования
проводились   на   компиляторах,   библиотечных   программах,
операционных системах. Последовательности команд обращения  к
процедурам оказались одной  из  наиболее  часто  используемых
групп  команд.   Например,   компилятору   с   Фортрана   для
административных вызовов  потребовалось  15%  всего  времени.
Поэтому в МКБ добавлены команда  перехода  к  подпрограмме  и
команда возврата. Для обеспечения рекурсии  область  хранения
адреса возврата  организована  по  принципу  стека.  Возможен
возврат на правую команду.

   Учитывая особенности аппаратуры связи с шиной, для быстрой
переписи   содержимого   группы   регистов   в    память    в
микропрограммах,    обслуживающих    операционную    систему,
используется ускоренный  режим  блочной  передачи  данных,  в
котором  во  втором  и  последующих   обращениях   к   памяти
отсутствуют процедура захвата шины и фаза передачи адреса.

   В   МКБ   сделана   аппаратно-микропрограммная   поддержка
многопроцессорной конфигурации машины,  работающей  на  общей
памяти.   Это   команды   семафорного   чтения   и    записи,
обеспечивающие захват  семафорного  слова  с  записью  номера
процесса,  захватившего  семафор,  и  его   освобождение.   В

операционной системе такие команды обычно  требуют  изменения
режима работы ЦП (например, установку  или  сброс  блокировки
внешних прерываний),  поэтому  изменение  состояния  регистра
режимов также вошло в функцию команд обращения к семафору.

   Эффективность  системы  команд  по  сравнению   с   БЭСМ-6
возросла по некоторым оценкам в 2-3 раза за  счет  увеличения
набора команд. Оработка символьной информации производится на
порядок меньшим числом команд.

   Из возможных 511 кодов команд задействована только  часть.
Резервные  коды  могут  использоваться  для  расширения   или
изменения    системы    команд.    Часть     команд     может
интерпретироваться экстракодами.



  4.2.Умножение и деление. Арифметика с плавающей запятой.


   Команды  умножения  и  деления  в  макетном  варианте  МКБ
выполняются микропрограммно. Алгоритмы умножения  и  деления,
особенно для чисел с  плавающей  запятой,  являются  наиболее
сложными в МКБ, поэтому рассматриваются более подробно.

   В микропрограммах умножения и деления можно  выделить  две
фазы: инициализацию, заключающуюся в проверке на  0,  анализе
знаков операндов и т.д., и собственно выполнение операции.

   В  алгоритме  умножения   используется   известный   метод
суммирования  сдвинутых  частичных  произведений.  Каждое  из
частичных произведений формируется путем умножения  множимого
на одну цифру (бит) множителя.  Для  двоичных  чисел  цифрами
множителя являются 1 или 0,  поэтому  частичные  произведения
равны множимому или  нулю.  Сложение  частичных  произведений
выполняется по мере  их  образования.  В  сумматоре  хранится
сумма  частичных  произведений,  другой   регистр   выполняет
функции счетчика. Цикл умножения  выполняется  один  раз  для
каждого бита множителя /2,29/.

   Выполнение  цикла  начинается  с  проверки   одного   бита
множителя. Если он равен 0, содержимое сумматора не меняется.
Если равен 1, множимое добавляется к  содержимому  сумматора.
Завершается цикл уменьшением  счетчика  на  1  с  последующей
проверкой, после чего он может быть повторен. Поскольку часто
умножаются небольшие числа, алгоритм умножения построен таким
образом, чтобы число циклов  было  равно  меньшему  из  числа
значащих  разрядов  сомножителей,  а  частичная   сумма   для
получения окончательного результата не требовала  бы  сдвига.

На каждом шаге делается проверка на переполнение.

   Деление  выполняется  при  помощи  операций  вычитания   и
сдвига. Перед делением, если необходимо, делитель  сдвигается
для выравнивания величин делимого и  делителя.  Цикл  деления
выполняется столько  раз,  сколько  сдвинут  делитель.  После
нахождения  первой  цифры  частного  делитель  вычитаетя   из
делимого.   Если   в    результате    вычитания    получается
отрицательное    число,    исходное     значение     делимого
восстанавливается, т.к. найденное значение превышает истинное
и поэтому  ошибочно.  Деление  выполняется  с  положительными
числами.    Если    необходимо,    отрицательное     значение
присваивается частному в конце алгоритма.

   Алгоритмы умножения и деления  можно  улучшить.  Например,
если  в  процессе  умножения   проверять   на   каждом   шаге
одновременно два разряда, или делать сложение  или  вычитание
множимого  только  в  момент  изменения  значений  сдвигаемых
разрядов множителя с 0 на 1 или с 1 на 0 (алгоритм Бута), для
деления  можно  использовать  алгоритм   без   восстановления
остатка /2,61/. Были реализованы наиболее  простые  алгоритмы
для быстрого получения работающей системы команд,  тем  более
что в окончательном  варианте  МКБ  предусмотрена  аппаратная
реализация операций умножения и деления.

   В операциях с плавающей запятой по  той  же  причине  были
реализованы аналогичные алгоритмы с небольшой разницей. Здесь
число циклов умножения и деления равно числу знаков мантиссы,
т.к. при  наличии  арифметики  для  целых  чисел  операции  с
плавающей запятой с  наибольшей  вероятностью  выполняются  с
нормализованными числами. Основное  внимание  в  операциях  с
плавающей  запятой  уделяется  процедуре  нормализации,  т.к.
независимо от способа  реализации  собственно  умножения  или
деления нормализация будет выполняться  микропрограммно,  тем
более  что  эти  же  проблемы  нужно  решать  для   сложения,
вычитания и других операций с плавающей запятой.

   Правила нормализации и округления аналогичны  существующим
на   ЭВМ   БЭСМ-6   /62/.   Нормализация   результата   влево
производится  в  том  случае,  если  результат  операции  над
мантиссами меньше 1/2 для положительных чисел  и  меньше  или
равен 1/2 для отрицательных чисел. Мантисса сдвигается  влево
на столько разрядов, чтобы мантисса результата  стала  больше
или равной 1/2 для  положительных  чисел  и  больше  1/2  для

отрицательных чисел. Из порядка результата вычитается  число,
равное количеству сдвигов.

   В  /63/  приведены  результаты  исследований,  проведенных
Д.У.Суини, в  которых  было  прослежено  выполнение  операций
сложения  и  вычитания  с  плавающей  запятой  на  "типичных"
численных программах с  большим  диапазоном  числовой  шкалы.
Исследования показывают, что вероятность появления  операндов
с одинаковыми показателями наибольшая. Когда операнды  одного
знака и нормализованы, при вычислении суммы  (разности)  чаще
всего нормализация не требуется.

   Распределение     вероятностей     количества     сдвигов,
необходимого для нормализации результата в операциях сложения
(вычитания):

   на 1 разряд вправо - 0.20;

   никакого сдвига    - 0.60;

   на 1 разряд влево  - 0.07;

   на 2 разряда влево - 0.03 и т.д.

   В таблицу не вошли  случаи  сдвига  влево  на  3  и  более
разрядов, а также случаи, когда результат был равен 0.

   Согласно  этим  результатам,   для   ускорения   процедуры
нормализации  в  микропрограмме  прежде  всего   проверяется,
нормализована ли мантисса результата. Если нет,  проверяется,
достаточно ли одного сдвига вправо (влево).

   Округление   результата   производится   при    отсутствии
блокировки  округления  наложением  "1"  в   младший   разряд
мантиссы сумматора в следующих случаях:

   - если  нормализация  не  нужна,  а  в  младших   разрядах
результата есть хотя бы одна единица;

   - при  отсутствии   блокировки   нормализации   после   ее
выполнения  в  младших  разрядах  мантиссы,  не  вошедшей   в
сумматор и записываемой в регистр младших разрядов, есть хотя
бы одна единица.

   Округление выполняется наложением "1" в младший разряд  (а
не  сложением  с  "1"),  чтобы  избежать  "непредусмотренного
переполнения при округлении" /63/ и  повторной  нормализации.
Это  может  быть  в  том  случае,  когда   после   выполнения
нормализации делается сложение с "1" для выполнения процедуры
округления, и мантисса становится снова ненормализованной.




        4.3.Особенности микропрограммной реализации


        префиксации и магазинного способа адресации.


   Для организации адресации  к  любому  участку  оперативной
памяти   по   принципу   "магазина"   15-ый   индекс-регистр,
являющийся указателем магазина, при записи в память указывает
адрес записи, а после записи увеличивается на 1, при чтении -
наоборот.  Микропрограммы  команд,  где  возможно  магазинное
обращение к памяти, написаны в 2-х вариантах: для обычного  и
магазинного способа  адресации.  Для  выбора  соответствующей
микропрограммы на вход ПНА вместе  с  КОП  поступает  признак
использования в команде 15-ого индекс-регистра (рис.5).

   Как  уже  упоминалось,  в  МКБ,  так  же  как  в   БЭСМ-6,
существуют команды изменения исполнительного адреса следующей
команды. Они устанавливают  признак  ПИА  (признак  изменения
адреса) в 1 и заносят число для изменения адреса в регистр С.
Строки  ПНА  команд,  соответствующие  ПИА=1  и  любому  коду
операции, содержат ссылку на микрокоманду сложения регистра С
с адресом в команде. После увеличения  адреса  на  содержимое
регистра С микропрограмма повторно делает передачу управления
по адресу из ПНА команд с тем же значением кода операции,  но
уже  без  признака  ПИА.  В  этом  случае  выбирается   адрес
микропрограммы  для  исполнения  команды.  Такая  организация
позволила  во  всех  микропрограммах  избежать   дублирования
микрокоманд, реализующих префиксацию.

   Такой  двойной  переход  по   переключателю   для   выбора
последовательности микрокоманд, из которых  первая  вычисляет
исполнительный адрес команды, а вторая - реализует собственно
команду, очень эффективен для экономии  места  в  управляющей
памяти. Этот метод  был  отработан  при  реализации  способов
адресации   в   микропроцессорном    контроллере    М-16    с
микропрограммным управлением /64, 65/ и применен в МКБ.

   Выбором одной из двух  последовательностей  микрокоманд  в
М-16  управляет  аппаратура,  в  МКБ  -  один   из   разрядов
микрокоманды, разрешая или запрещая передачу признака ПИА  на
вход  ПНА.  Сбрасывать  признак  ПИА  сразу  же   после   его
использования  нельзя,  т.к.  во  время  исполнения   команды
возможны прерывания, и  всегда  полезно  знать  точный  адрес
прерывания. Более того, возможны прерывания, не приводящие  к
фатальному исходу, после обработки которых выполнение команды
повторяется.  Это  могут  быть  страничные   прерывания   или

прерывания,  связанные  с  разнообразной  защитой  по   тегу.
Поэтому  в  процессе  исполнения  команды  нельзя   допускать
необратимых изменений, которые при повторном исполнении  этой
же команды могут привести к неверному результату. В  командах
префиксации это "опасное место" - сброс и установка  признака
ПИА, в зависимости от которого по-разному вычисляется адрес в
команде,  а  в  случае  с  магазинным  способом  адресации  -
изменение 15 индекс-регистра. Поэтому  изменение  содержимого
15  индекс-регистра  и   признака   ПИА   в   соответствующих
микропрограммах происходит в конце исполнения команды.



           4.4.Система прерываний и экстракодов.


   ПРОЦЕСС. РЕСУРСЫ ПРОЦЕССА.  Все,  что  происходит  в  ЭВМ,
выполняющей   программу,   есть    совокупность    процессов,
взаимодействующих друг  с  другом  и  с  внешним  миром.  Для
аппаратной   поддержки   концепции   процессов   в   ЦП   МКБ
предусмотрен 8-разрядный регистр  номера  процесса  (РНП).  В
любой момент времени любой ЦП занят  ровно  одним  процессом.
Любой процесс использует не более одного ЦП. В  любой  момент
времени каждый процесс находится  в  определенном  состоянии.
Состояние  процесса  содержит  по  меньшей   мере   следующую
информацию: 1)программу; 2)индикацию команды, которая  должна
выполняться следующей; 3)величины всех программных переменных
и   данных;   4)состояние   всех    используемых    устройств
ввода-вывода /29/. Часто  оказывается  удобным  сгруппировать
вместе   все   изменяемые   части   состояния   процесса    и
рассматривать их как вектор состояния.  Тогда  процесс  можно
считать состоящим  из  двух  частей:  неизменяемой  части  (в
большинстве  случаев  это  программа)  и  вектора   состояния
(изменяемой части). Организацией многопроцессорной работы  на
общей  памяти  и  распределением  процессов  по   процессорам
занимается операционная система (ОС),  поэтому  дальше  будет
рассматриваться только  отдельный  процессор.  Процесс  может
быть активным, когда он  исполняется  в  ЦП,  или  пассивным,
когда ждет доступа к ресурсам или очередного  кванта  времени
для   активизации.   Поскольку    микропрограмма    управляет
операционным устройством ЦП, речь пойдет об изменяемой  части
процесса, находящейся в ЦП. Это - содержимое счетчика команд,
различных регистров, признаков результатов и т.д.

   В ЦП имеется ряд  регистров  общего  назначения,  так  или

иначе используемых процессом: сумматор (А),  регистр  младших

разрядов  (РМР),  программный   счетчик   (СЧАС),   а   также
дополнительне регистры, которых нет в БЭСМ-6 - регистр адреса
последней передачи управления (РОП), регистр  исполнительного
адреса (ИАОП) (рис.12.).



                      РЕГИСТРОВЫЙ ПУЛ:
                   ┏━━━━━━━━━━━━━━━━━━━━┓
                   ┃╎╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╴┃
                   ┃╎┌────────────────┐╎┃
                   ┃╎│                │╎┃
                   ┃╎│ группа процесса│╎┃
                   ┃╎│                │╎┃    РЕГИСТРЫ ГРУППЫ:
                   ┃╎│    обработки   │╎┃
                   ┃╎│                │╎┃←─┐  ┌─────────────┐
                   ┃╎│    прерываний  │╎┃  │  │             │
                   ┃╎                  ╎┃  │  │ 15 индекс-  │
                   ┃╎└────────────────┘╎┃  │  │             │
                   ┃╶╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╴┃  │  │             │
                   ┃         .          ┃  │  │регистров или│
РЕГИСТРЫ ОБЩЕГО    ┃                    ┃  │  │             │
                   ┃         .          ┃  │  │             │
НАЗНАЧЕНИЯ (РОН):  ┃                    ┃  │  │модификаторов│
                   ┃         .          ┃  │  │             │
 ┏━━━━━━━━━━━┓     ┃                    ┃  │  │             │
 ┃           ┃     ┃         .          ┃  │  │╌╌╌╌╌╌╌╌╌╌╌╌╌│
 ┃     А     ┃     ┃                    ┃  │  │             │
 ┃           ┃     ┃         .          ┃  │  │ специальные │
 ┃───────────┃     ┃                    ┃  │  │             │
 ┃           ┃     ┃                    ┃  │  │             │
 ┃   Р М Р   ┃     ┃╎╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╴┃  ┌──┐  регистры:  │
 ┃           ┃     ┃╎┌────────────────┐╎┃  │  │             │
 ┃───────────┃     ┃╎│                │╎┃  │  │             │
 ┃           ┃     ┃╎│ рабочая группа │╎┃  │  │ РР,С,РНП... │
 ┃  С Ч А С  ┃     ┃╎│                │╎┃←─┐  │             │
 ┃           ┃     ┃╎│   регистров    │╎┃  │  │╌╌╌╌╌╌╌╌╌╌╌╌╌│
 ┃───────────┃     ┃╎│                │╎┃  │  │             │
 ┃           ┃     ┃╎│   процесса N   │╎┃  │  │область упря-│
 ┃   Р О П   ┃     ┃╎│                │╎┃  │  │             │
 ┃           ┃     ┃╎└────────────────┘╎┃  │  │             │
 ┃───────────┃     ┃╎┌────────────────┐╎┃  │  │ тывания РОН:│
 ┃           ┃     ┃╎│                │╎┃  │  │             │
 ┃  И А О П  ┃     ┃╎│резервная группа│╎┃  │  │             │
                   ┃╎│                │╎┃←─╴  │А,РМР,СЧАС...│
 ┗━━━━━━━━━━━┛     ┃╎│    регистров   │╎┃     │             │
                   ┃╎│                │╎┃
                   ┃╎│    процесса N  │╎┃     └─────────────┘
                   ┃╎                  ╎┃
                   ┃╎└────────────────┘╎┃
                   ┃╶╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╴┃
                   ┃         .          ┃
                   ┃                    ┃
                   ┃         .          ┃
                   ┃                    ┃
                   ┃         .          ┃
                   ┗━━━━━━━━━━━━━━━━━━━━┛
   Рис.12. Основные регистры ЦП. Группы индекс-регистров.
   Особенностью ЦП  МКБ  является  ортогональная  архитектура
индекс-регистров /66/. Она порождается элементами  аппаратной
избыточности  и  может   рассматриваться   как   основа   для
сохранения "ортогональных"  состояний  ЦП  при  переключениях
процессов. Каждый процесс  имеет  свои  собственные  ресурсы,
независимые от других процессов, поэтому любые  трансформации
состояния одного процесса не влияют на  другие.  При  этом  в
значительной  степени  минимизируются  затраты   времени   на
запоминание состояния ЦП при прерываниях. Избыточные  ресурсы
ЦП  позволяют  оставить  "на   месте"   текущий   процесс   и
переключиться на другие аппаратные ресурсы.

   Регистровый пул в МКБ состоит из  32  групп  регистров.  В
каждый  момент  времени  в  качестве  модификаторов  доступны
только регистры группы активного процесса, чей номер  записан

в регистр номера группы (РНГ). Состояние этого регистра может
изменяться только  специальными  командами.  Регистры  общего
назначения  всегда  активны  и  связаны  с  активной  группой
регистров. Содержимое регистров общего назначения  пассивного
процесса скопировано  в  область  упрятывания  в  его  группе
регистров,  в  данный  момент   пассивной,   либо   полностью
скопировано в память.

   Каждому  процессу  отводится  одна  или  несколько   групп
32-разрядных регистров. В каждой группе 32  регистра,  15  из
которых  используются   в   качестве   индекс-регистров   или
модификаторов  и  участвуют  в  формировании  исполнительного
адреса.  0-й  регистр  всегда  содержит  0-й  код.  Остальные
регистры  -   специальные   и   доступны   программе   только
привилегированными командами чтения  и  записи.  Это  регистр
номера  процесса  (РНП),  регистр   режимов   (РР),   регистр
изменения адреса команды С, часы и таймер  счетного  времени.
Среди  них  и  регистры,  предназначенные   для   упрятывания
регистров  общего  назначения  процесса  при  прерываниях   и
экстракодах.

   Для смены процессов или организации  вызова  экстракода  в
область упрятывания регистров  текущего  процесса  достаточно
скопировать содержимое регистров общего назначения,  записать
другой номер в РНГ и восстановить содержимое регистров общего
назначения   нового   процесса.   Эта   работа    выполняется
специальной микропрограммой.

   Если  процесс  занимает  группу  регистров,   значит,   он
"привязан" к ЦП. Процесс может быть привязан не более  чем  к
одному ЦП. "Отвязка" процесса от ЦП есть перепись содержимого
группы  или  групп  регистров  процесса  в   память.   Группы
регистров являются ресурсом. Распределением ресурсов,  в  том
числе "отвязкой" и "привязкой" процессов к ЦП, занимается ОС.

   ЭКСТРАКОДЫ. Экстракоды  -  это  макрокоманды,  исполняемые
операционной системой (ОС). Вызов  экстракода  заключается  в
передаче управления ОС. В БЭСМ-6 одна из проблем, связанная с
экстракодами   и   прерываниями   -   это    упрятывание    и
восстановление содержимого  регистров.  В  МКБ  эта  проблема
решена более эффективно. Наличие у  процесса  запасных  групп
регистров и возможности микропрограммного управления  снимают
весьма серьезную проблему, стоявшую перед разработчиками всех
ОС БЭСМ-6 - организацию упрятывания регистров при прерываниях

и экстракодах.

   Каждому  процессу  отводится  одна  или  несколько   групп
регистров. Одна из них (самого "нижнего уровня") используется
программой, другие используются экстракодами, вызываемыми  из
программы. Последовательность "связывания" групп регистров  в
"цепочку" задается  в  ОС,  что  позволяет  менять  стратегию
распределения регистров на  уровне  операционной  системы,  а
микропрограмма может реализовать любую.

   Если  имеется  резервная  группа,  микропрограмма   вызова
экстракода   переписывает   содержимое    регистров    общего
назначения  (А,РМР,СЧАС,РОП,ИАОП)   в   область   упрятывания
текущей группы регистров и делает переход на резервную.  Если
у процесса всего лишь  одна  группа,  происходит  упрятывание
всех регистров, в том числе и  модификаторов,  в  специальную
область памяти, причем запись производится в  режиме  блочной
передачи данных с максимальной скоростью.  В  индекс-регистры
экстракода микропрограмма  записывает:  исполнительный  адрес
экстракода,  номер  процесса,   вызвавшего   экстракод,   его
программный счетчик, регистр режимов и т.д. Таким образом,  к
моменту исполнения первой команды  программы  экстракода  вся
необходимая  ей  информация  находится  у   нее   в   рабочих
регистрах.

   Возврат из экстракода производится  специальной  командой,
подаваемой  в   диспетчерском   режиме.   Происходит   полное
восстановление содержимого  регистров.  Причем,  если  группа
регистров  одна,   идет   восстановление   содержимого   всех
регистров  из  памяти.  Если  у  процесса   несколько   групп
регистров,  предыдущая  группа  становится  активной,  из  ее
области упрятывания  восстанавливается  содержимое  регистров
общего  назначения.  Остальные   регистры   восстанавливаются
вместе со сменой группы.

   ПОДДЕРЖКА   ПРЕРЫВАНИЙ.   Считается,   что   имеет   место
прерывание,  когда  ЭВМ  получает   запрос   на   прерывание,
приостанавливающее   работу   текущего   процесса   /3,8,29/.
Механизм, начинающий работать от прерывания, должен:

   - сохранить состояние прерванного процесса, чтобы он смог,
если это возможно,  в  дальнейшем  возобновить  свою  работу,
начиная с точки прерывания;

   - проанализировать  запрос  на  прерывание  и  привести  в
действие  соответствующие  процедуры  обработки   прерываний.

Когда эти действия выполнены, состояние прерванного  процесса
может быть восстановлено.

   Большинство операций,  выполняемых  ЭВМ,  инициализируется
сигналами  прерываний.  Обработка  и   поддержка   прерываний
являются процедурой, занимающей заметное время ЦП.  Уменьшить
время обработки прерываний можно несколькими способами:

   1)ускорить механизм входа и возврата из прерывания;

   2)часть  прерываний   по   возможности   обрабатывать   на
микропрограммном уровне, чтобы избежать  лишних  обращений  к
супервизору /3/;

   3)информацию  о  прерванном  процессе,   необходимую   для
обработки   прерывания,   подготавливать   перед   входом   в
прерывание.

   В МКБ в рабочие  регистры  процесса  обработки  прерывания
переписывается адрес команды, исполнительный адрес  операнда,
содержимое регистра режимов,  номер  прерванного  процесса  и
другая информация о прерванном процессе.

   При входе в прерывание  главная  задача  микропрограммы  -
сохранить состояние процесса, которое  в  общем  случае  есть
сумма состояний машины и  микромашины,  выполняющих  процесс.
Поэтому прерывание  микропрограммы  или  инструкции  в  любой
точке в процессе ее исполнения может привести к необходимости
сохранения очень большого количества информации,  относящейся
как к машинному, так и к микромашинному уровню.

   Все  прерывания   с   точки   зрения   обработки   их   на
микропрограммном   уровне   делятся   на   несколько   групп:
псевдопрерывания, внешние и внутренние прерывания.

   Внутренние прерывания происходят при ненормальных условиях
во  время  работы  процесса  или  при  необычных   ситуациях,
сгенерированных  программой.  Это   могут   быть   страничные
прерывания, прерывания по разного рода защитам,  переполнению
и  т.д.  При  внутренних  прерываниях  невозможно  дальнейшее
исполнение  этой  команды,   поэтому   сохранение   состояния
микромашины бессмысленно. Но в ряде случаев после  устранения
причины (подкачка страницы, снятие защиты и т.д.)  исполнение
программы может  быть  продолжено,  начиная  с  невыполненной
команды. Для этого необходимо только  сохранение  информации,
относящейся к машинному уровню, т.е.  сохранение  содержимого
счетчика команд, сумматора, регистра младших разрядов и т.д.

   Внешние прерывания случаются по независимым по отношению к

процессу причинам и могут произойти в любой момент, что может
привести к необходимости сохранения очень большого количества
информации. Только микропрограмма "знает"  степень  занятости
ресурсов и ситуацию на  уровне  микромашины,  поэтому  должен
быть обеспечен микропрограммный контроль этого  сигнала.  Для
этого в МКБ используется  разряд  в  микропрограммном  слове,
разрешающий   прохождение   сигналов   внешних    прерываний.
Микропрограмма   выбирает   точку   прерывания   так,   чтобы
минимизировать  потребности  в  области  хранения   и   время
перезаписи,  а  также  при  восстановлении   процесса   после
возврата из прерывания не  повторять  действий,  которые  уже
были совершены.

   Оптимальное место для прерывания с  этой  точки  зрения  -
после  фазы  исполнения,  когда  все   регистры   микромашины
свободны и готовы для выборки и исполнения следующей команды.
Прерывание также может быть  помещено  непосредственно  после
фазы выборки команды, но до начала  фазы  вычислений.  В  это
время необходимо сохранить только регистр команды и несколько
регистров, связанных  с  прерываемой  микропрограммой.  Можно
совсем не сохранять регистры микропрограммы и после  возврата
из прерывания повторить выборку команды,  как  и  после  фазы
исполнения.

   Основной цикл "выборка команд  -  исполнение",  общий  для
всех  инструкций  МКБ,  показан   на   рис.13.   Особенностью
организации  командного  цикла  является  наличие   в   одном
командном слове двух  команд,  различаемых  признаком  правой
команды (ППК). Прерывание заключается в разрыве этого  цикла.
Как уже было сказано, сигнал  разрешения  внешних  прерываний
удобнее всего размещать после фазы  исполнения  команды,  тем
более что в МКБ этот  сигнал  еще  фиксирует  признак  правой
команды на макроуровне, отличающий стадии исполнения левой  и
правой команды.

   Ситуация осложняется еще и тем, что в  МКБ  взаимодействие
ЦП с ПП построено на прерываниях. Для обеспечения  "шагового"
(покомандного) режима работы нужно делать приостановку  после
выборки  команды,  но  до  ее  исполнения,   поэтому   сигнал
разрешения прерываний нужен также  после  выборки  командного
слова. В итоге получилось 3 сигнала разрешения прерывания  во
время исполнения двух команд, находящихся в  одном  командном
слове.



                       ┌───────────────┐
                       │               │
                       │ инициализация │
                       └───────┬───────┘
                               │
                               │←───────────────────↑
                                                    │
                       ┌───────↓───────┐            │
                       │ выборка коман-│            │
                       │               │            │
                       │  дного слова  │            │
                                                    │
                       └───────┬───────┘            │
                               │                    │
                               ↓                    │
                          ╌╌╌╌╌╌╌╌╌╌╌╌              │
                         ╎            ╎             │
                         ╎ прерывания ╎             │
                                                    │
                          ╌╌╌╌╌╌╌╌╌╌╌╌              │
                               │                    │
          ┌───────────────────→│                    │
          │                                         │
          │              ╶─────↓──────              │
          │             /             \             │
          │                правая или               │
          │          ←╴/               \╶→          │
          │          │ \ левая команда?/ │          │
          │          │                   │          │
          │     левая│  \             /  │правая    │
          │          │   ╶───────────╴   │          │
          │          │                   │          │
          │                                         │
          │  ┌───────↓───────┐   ┌───────↓───────┐  │
          │  │   выполнение  │   │   выполнение  │  │
          │  │               │   │               │  │
          │  │ левой команды │   │ правой команды│  │
          │                                         │
          │  └───────┬───────┘   └───────┬───────┘  │
          │                                         │
          │          ↓                   ↓          │
          │ ┌────────────────┐   ┌────────────────┐ │
          │ │                │   │                │ │
          │ │  установка ППК │   │сброс ППК,СЧАС+1│ │
          │                                         │
          │ └────────┬───────┘   └───────┬────────┘ │
          │                                         │
          │          ↓                   ↓          │
          │     ╌╌╌╌╌╌╌╌╌╌╌╌        ╌╌╌╌╌╌╌╌╌╌╌╌    │
          │    ╎            ╎      ╎            ╎   │
           ←───╎ прерывания ╎      ╎ прерывания ╎╶─→
                ╌╌╌╌╌╌╌╌╌╌╌╌        ╌╌╌╌╌╌╌╌╌╌╌╌
         Рис.13. Схема исполнения команды в МКБ-8601.
   При  прерываниях  происходит  аппаратная  подмена   адреса
следующей микрокоманды на фиксированный адрес  микропрограммы
входа  в  прерывание.  Микропрограмма  входа   в   прерывание
записывает адрес прерванной микропрограммы в стек микромашины
и производит передачу управления по адресу из ПНА  прерываний
в зависимости  от  вектора  прерываний  на  обработку  самого
приоритетного из них.

   В случае нескольких прерываний, происходящих одновременно,
для   определения   прерывания,    обрабатываемого    первым,
существует строго упорядоченная система приоритетов  /67/,  в
которой  каждый   сигнал   прерывания   имеет   фиксированный
приоритет.

   Внутренние прерывания в  МКБ  имеют  общий  сигнал  сброса
прерываний, поэтому необходимо было расставить прерывания  по
приоритетам таким образом, чтобы:

   а).не потерять прерывания;

   б).не  считать  следствие  за  причину,  т.е.  прерывания,
появившиеся в результате ошибочного обращения  к  памяти  или
регистрам  приписки,  должны  иметь  меньший  приоритет,  чем

прерывания, указывающие на ошибочность самого обращения.

   Эта  достаточно  сложная  задача  облегчалась   тем,   что
некоторые  прерывания   в   принципе   не   могут   произойти
одновременно,   поэтому    относительная    расстановка    их
приоритетов  произвольна  и  определялась  только  удобствами
обработки.

   Наибольший приоритет имеют прерывания, связанные со  сбоем
аппаратуры при обращениях к ОЗУ и шине. В  группе  прерываний
при обращениях  к  регистрам  приписки  наибольший  приоритет
имеют прерывания, связанные  с  неверным  адресом  или  чужим
регистром приписки. Затем - различные  прерывания  по  защите
страницы, указанной в регистре приписки. В группе  прерываний
при выборке команды или операнда наибольший  приоритет  имеют
прерывания,  связанные  с  программной  интерпретацией   тега
команды или операнда  (другая  трактовка  разрядов  тега),  а
затем уже - прерывания, связанные  с  разнообразной  защитой,
проставленной в разрядах тега. Наименьший приоритет имеют так
называемые  микропрограммные  прерывания,   причина   которых
выясняется в  процессе  исполнения  команды  -  переполнение,
деление на 0 и т.д.  Происходят  они  сразу  же,  как  только
бывают обнаружены, чему не  мешает  их  невысокий  приоритет,
т.к. в это время другие прерывания отсутствуют.

   ПСЕВДОПРЕРЫВАНИЯ. В МКБ существует  небольшая  группа  так
называмых  псевдопрерываний,  обработка   которых   полностью
происходит на микропрограммном уровне.

   Часть  псевдопрерываний  также  разрешается  сигналом   из
микропрограммы, и обработка их не вызывает проблем. Например,
прерывание по исчерпанию аппаратного микросекундного  таймера
или часов счетного времени процесса, когда нужно вычесть  "1"
из старшей половины таймера или  часов,  которая  хранится  в
регистре.

   Остальные псевдопрерывания могут произойти в любой  момент
во время  исполнения  микропрограммы  и  требуют  немедленной
обработки. Например, прерывания, связанные  с  обращением  по
0-ому  математическому  адресу.  Для   их   обработки   нужно
освободить некоторое пространство  регистров  микромашины,  в
общем  случае  занятых   промежуточными   результатами.   Для
сохранения  содержимого  микропрограммных  регистров  в  этом
случае  используется  область  упрятывания  регистров  общего
назначения в регистровом пуле. Это возможно, т.к.  прерывания

в это время произойти не могут: внешние  -  потому,  что  нет
разрешающего сигнала из микропрограммы, внутренние -  в  силу
отсутствия     внутренних     причин.     После     обработки
псевдопрерывания     состояние     регистров      микромашины
восстанавливается,  производится   передача   управления   по
адресу,  выбираемому  из  стека  микромашины,  и   выполнение
микропрограммы    продолжается    с    прерванного     места.
Псевдопрерывания для ОС не чувствительны.

   В   эту   группу   входит   также   псевдопрерывание   для
микропрограммного пересчета приоритетов  страниц.  Прерывание
используется для поддержки алгоритма управления памятью в  ОС
и реализует алгоритм расстановки приоритетов в зависимости от
времени обращения к странице после запроса коррекции  списков
приоритетов  страниц  /68/.  Для  оценки  активности  страниц
запоминается  очередность  первых  обращений   к   страницам,
начиная с момента, установленного ОС. Максимальный  приоритет
получают страницы, к которым обращение происходит раньше, так
как (в разумных предположениях) наиболее  вероятно,  что  они
самые   активные.   Таблица   приоритетов   имеет   ссылочную
структуру, и время на ее преобразование для одной страницы не
зависит от числа страниц  физической  памяти.  Регистрируются
также и факты обращения/записи в страницы памяти.

   Идея этого алгоритма полностью аналогична  существовавшему
на ЭВМ БЭСМ-6, но реализована  микропрограммно  с  аппаратной
поддержкой.  Выигрыш  во  времени  от   этого   значительный,
поскольку в микропрограмме отсутствует фаза выборки команд, и
при переводе этого алгоритма, заключающегося  в  перестановке
элементов списка, с языка команд  на  язык  микрокоманд  одна
команда  заменяется  одной  микрокомандой.  Кроме  того,  для
активизации  процедуры  пересчета   страниц   необходимо   не
внутреннее  прерывание  со  сменой  процессов  и   со   всеми
вытекающими   отсюда   последствиями,   а   псевдопрерывание,
эквивалентное по времени простой передаче управления с  одной
микрокоманды на другую.

   Еще одно прерывание такого типа, разрешаемое  сигналом  из
микропрограммы,  -  прерывание  "останов".  Фактически,   это
приостановка процессора после исполнения текущей команды  или
после выборки командного слова. Кроме прерывания "останов" по
запросу пультового процессора может быть еще несколько причин
останова. Это может быть  команда  "останов",  или  ситуация,

когда произошло одно внутреннее прерывание во время обработки
другого, или  останов  при  обращении  по  адресу,  заданному
пультовым  процессором.  Во  время   "останова"   выполняется
микрокоманда,   опрашивающая   состояние   сигнала   запуска,
устанавливаемого ПП. ЦП на уровне машины стоит, а  на  уровне
микромашины работает, что позволяет обращаться к нему в  этот
момент из пультового процессора за доступом к регистрам.

   Прерывание "останов" может использоваться для  организации
отладочного режима. Для этого ПП устанавливает режим останова
с соответствующим признаком. Микропрограмма прерывается после
исполнения  каждой  команды.  Если  задан  отладочный  режим,
микропрограмма вместо остановки проверяет, произошло или  нет
заданное событие. Если нет, микропрограмма делает возврат  из
прерывания и продолжает исполнение  очередной  команды.  Если
ожидаемое  событие  (например,  порча  регистра)   произошло,
микропрограмма посылает сообщение ПП и ждет указаний.

   Этот же механизм можно использовать  для  останова  только
заданного  процесса;  в  частности,  задавать  шаговый  режим
программе только в режиме математика.

   ВНУТРЕННИЕ  ПРЕРЫВАНИЯ.  Обработка  внутренних  прерываний
происходит на уровне операционной системы. Процесс  обработки
прерываний   в   системе   является   обычным   процессом   с
фиксированной  (нулевой)  группой  регистров.  Микропрограмма
входа в прерывание  переписывает  содержимое  всех  регистров
общего назначения прерванного процесса в область упрятывания
регистров внутри группы и  делает  активной  группу  процесса
обработки прерываний. В рабочие регистры  процесса  обработки
прерывания   микропрограмма   записывает   всю    необходимую
информацию о прерванном процессе: номер прерванного процесса,
содержимое регистра режимов, сумматора, исполнительный  адрес
и т.д. и прередает управление на выборку командного слова  по
математическому  адресу,  определяемому  в   зависимости   от
вектора прерывания.

   ВНЕШНИЕ  ПРЕРЫВАНИЯ.  Внутренние  прерывания   исполняются
безусловно и имеют более высокий  приоритет  по  сравнению  с
внешними.  Внешние  прерывания  исполняются  при   отсутствии
признака  блокировки   внешних   прерываний   (БВП).   Статус
прерывания заносится в   главный  регистр  прерываний  (ГРП),
доступный ОС, разряды которого соответствуют  каждому  случаю
или классу прерываний. Всего может  быть  64  различных  типа

внешних прерываний. Порядок отработки их определяется номером
позиции в  ГРП.  При  отсутствии  БВП  запросы  на  обработку
прерываний от внешних устройств поступают в блок  реакции  на
прерывания  в  виде  логической  суммы   запросов   от   всех
устройств. По этому сигналу после выполнения текущей  команды
инициируется  работа  микропрограммы  входа   в   прерывание,
которая производит чтение запросов на обработку прерываний  в
ГРП и их гашение. При многопроцессорной  системе  на  внешние
прерывания   реагирует   тот   процессор,   который    первый
"откликнулся" (у которого нет БВП). При  внешних  прерываниях
микропрограмма передает управление ОС так же, как и в  случае
внутренних  прерываний.  Если  в  режиме  БВП  микропрограмма
обнаруживает внешнее прерывание, она его только  фиксирует  в
ГРП и сбрасывает. При обработке  внешних  прерываний  система
сама определяет количество  запросов  от  внешних  устройств,
анализируя состояние ГРП, и сама же  сбрасывает  разряды  ГРП
после обработки соответствующих прерываний.

   Перед передачей управления  на  выборку  командного  слова
программы     обработки      соответствующего      прерывания
микропрограмма входа в  прерывание  устанавливает  блокировку
внешних прерываний и признак останова при прерываниии, т.е. в
любой  момент  времени  в   закрытых   прерываниях   возможна
обработка только одного внешнего или внутреннего  прерывания.
Область упрятывания для обеспечения вложенности прерываний на
макроуровне  остутствует.  В  это   время   возможны   только
псевдопрерывания,      полностью      обрабатываемые       на
микропрограммном  уровне.  Программа   обработки   прерывания
анализирует ситуацию (в закрытых прерываниях) и  активизирует
уже обычный процесс обработки этого прерывания, который может
прерываться.

   Внешние прерывания случаются по внешним по отношению к ЭВМ
причинам, и хотя  время  обработки  таких  прерываний  обычно
довольно  короткое,  задержка  перед  прерыванием   программы
должна  быть  меньше,  чем  некоторый  заранее   определенный
максимум.

   Вход в прерывание и в экстракод, так же как и  возврат  из
прерывания  и  экстракода  были  реализованы  по  возможности
идентичным способом.  Возврат  из  прерывания  происходит  по
специальной команде,  подаваемой  из  диспетчерского  режима.
Восстанавливается один из процессов, находящийся в какой-либо

группе  регистров  и   ждущий   своей   очереди.   Дисциплина
планирования определяется на уровне ОС.  Это  может  быть,  в
частности,  последний  прерванный   процесс.   Микропрограмма
возврата из прерывания восстанавливает  содержимое  регистров
общего назначения. Остальные  регистры  восстанавливаются  со
сменой номера группы.  Исполнение  программы  продолжается  с
прерванного места.

   Одна из задач,  которая  ставилась  при  создании  МКБ,  -
обеспечить       мультипрограммность        ее        работы.
Микропрограммирование  берет  на  себя   часть   функций   по
обеспечению  этой  мультипрограммности.   Отсюда   достаточно
сложная микропрограммная поддержка обработки прерываний.



               4.5.Чтение, запись регистров.


        Обмен информацией  с  пультовым процессором.


   В центральном процессоре МКБ-8601  имеется  большое  число
специальных регистров и внутренней памяти. Каждому из них,  в
том  числе  и  всем  адресам  внутренней  памяти,  дан  некий
условный номер. Эти номера задаются при обращениях пультового
процессора,   а   также    в    привилегированных    командах
чтения/записи  и  передаются  на   вход   ПНА   чтения/записи
регистров для определения  адреса  микропрограммы  доступа  к
соответствующему   регистру.   В    командах    чтения/записи
содержимое регистра, номер которого  задается  исполнительным
адресом, пересылается в сумматор,  или  наоборот,  содержимое
сумматора  пересылается   в   регистр.   Обращения   ПП   для
чтения/записи   регистров   вызывают   псевдопрерывание   ЦП.
Микропрограмма   обработки   этого   прерывания    пересылает
содержимое заданного регистра в область, доступную ПП, а  при
записи  пересылает  заданное   значение   в   соответствующий
регистр. Для обеспечения контроля со стороны ПП ему обеспечен
доступ ко всем регистрам и внутренней памяти ЦП,  а  командам
чтения/записи уровня  машины  для  экономии  места  в  памяти
микропрограмм - только те, что необходимы для работы ОС.
