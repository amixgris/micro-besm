            III.Многоуровневая организация ЭВМ.


             3.1.Основные модули ЭВМ МКБ-8601.

   ЭВМ МКБ-8601 является микропрограммно управляемой  машиной
общего назначения с модульной организацией (рис.5).




                         ┌─────────┐
                         │         │
                         │  О З У  │
                         └─────────┘
                              ↑
                              │
                              ↓
  ⇐════════════════════════════════════════════════════════⇒
           ОБЩАЯ ШИНА  (АДРЕС, ДАННЫЕ, УПРАВЛЕНИЕ)
  ⇐════════════════════════════════════════════════════════⇒
       ↑           ↑          ↑            ↑          ↑
       │           │          │            │          │
       │
       ↓           ↓          ↓            ↓          ↓
   ┌──────┐    ┌──────┐    ┌──────┐    ┌──────┐    ┌──────┐
   │      │    │      │    │      │    │      │    │      │
   │  ПП  │    │ ЦП 1 │....│ ЦП N │    │КВУ 1 │....│КВУ 16│
   └──────┘    └──────┘    └──────┘    └──────┘    └──────┘
    ↑    ↑         ↑          ↑
    │....│         │          │
    │    ╶─────────╴          │
    ╶─────────────────────────╴
   последовательные линии связи
           Рис.5.Модульная организация ЭВМ МКБ-8601.
   Основными модулями, входящими в состав  машины,  являются:
оперативное  запоминающее   устройство   (ОЗУ),   центральный
процессор (ЦП) (их может  быть  несколько),  контроллеры  для
связи  с  внешними  устройствами  (КВУ),  а  также  пультовой
процессор (ПП). Связь между ними осуществляется  через  общую
шину /38,39/.

   ЦЕНТРАЛЬНЫЙ ПРОЦЕССОР состоит из:

   - блока  микропрограммного   управления,   осуществляющего
выборку команд из  основной  памяти  и  их  анализ,  а  также
управляющего передачей всех сигналов и  данных  в  физических
компонентах системы, таких, как шины, регистры;

   - регистров для запоминания  промежуточных  результатов  и
управляющей  информации:  сумматора  (А),  регистра   младших
разрядов     (РМР),     программного     счетчика     (СЧАС),
индекс-регистров    или    модификаторов,    участвующих    в
формировании исполнительного адреса, регистра  режимов  (РР),
регистра  и  таймера  счетного  времени  процесса,  регистров
адреса последней передачи управления  (РОП),  исполнительного
адреса (ИАОП),  номера  группы  модификаторов  (РНГ),  номера
процесса (РНП) и других;

   - схемы преобразования виртуальных адресов  в  физические,
блоков  обработки  внешних  и  внутренних  прерываний,  учета

активности  страниц   памяти,   блока   связи   с   пультовым
процессором, арифметическо-логического устройства и т.д.

   ОПЕРАТИВНАЯ ПАМЯТЬ  ЭВМ  состоит  из  блока  управления  и
матрицы   запоминающих   устройств.   Максимальная    емкость
оперативного  запоминающего  устройства  -  1  миллион  72  -
разрядных слов (9 Мбайт).  Для  повышения  отказоустойчивости
работы  памяти  в  блок  управления  встроен  генератор  кода
Хемминга.

   Блок управления ОЗУ выполняет следующие операции:

   - регенерацию памяти;

   - чтение слова с коррекцией однократной ошибки, перезапись
исправленного слова и фиксацию ошибок кратности 2 и более;

   - запись слова  с  проверкой  и  без  проверки  бита  тега
"запрещенная    запись"    (при     проверке     производится
предварительное считывание слова);

   - чтение семафорного слова (чтение-модификация-запись);

   - чтение и запись в режиме блочной передачи;

   - тестирование генератора Хемминга.

   ПУЛЬТОВОЙ  ПРОЦЕССОР  представляет  из  себя  микроЭВМ   с
собственной памятью, возможностью доступа к основной памяти и
ко  всем   регистрам   центрального   процессора.   Пультовой
процессор выполняет следующие функции:

   - загрузку памяти микропрограмм ЦП;

   - имитацию инженерного пульта машины (считывание и  запись
содержимого регистров ЦП, запуск микропрограммных тестов);

   - ввод двоичных программ в общую память;

   - запуск диспетчера или тестов в ЦП;

   - "пультовую" отладку программ в ЦП (пошаговое  выполнение
команд, останов по адресу);

   - обслуживание операторского терминала.

   Пультовой    процессор    может    прерывать    ЦП     или
приостанавливать его работу.  В  свою  очередь,  деятельность
самого ПП может быть прервана по запросу или аварии в ЦП,  по
сбою в памяти или инициативе оператора.

   В  связи  с  разнородностью  исполняемых   функций   обмен
информацией ПП  с  различными  узлами  машины  осуществляется
двумя способами (рис.5):

   а)через последовательную  линию  связи  -  с  центральными
процессорами для доступа к регистрам и внутренней памяти  ЦП,
памяти микропрограмм, для организации пультового останова;


   б)через общую шину данных - для обмена с общей  памятью  и
внешними устройствами, подключенными к общей шине.

   Являясь  самостоятельной  ЭВМ,  ПП   может   выполнять   и
множество  других  функций  по  обслуживанию   вычислительной
системы МКБ. Например, управление периферийными устройствами.
Обсуждение этих функций выходит за рамки данной работы.

   ОБЩАЯ ШИНА.   Обмен   информацией   между   блоками    ЭВМ
(процессоры, пультовой процессор, общая  память,  контроллеры
внешних устройств) осуществляется через общую шину данных.  С
целью уменьшения количества проводников 20-разрядная адресная
шина  совмещена  с  шиной  данных,  поэтому  процесс   обмена
происходит в две фазы: фазы передачи адреса и  фазы  передачи
данных.

   При обращении к  блоку  общей  памяти  возможны  следующие
ненормальные ситуации:

   - запись данных в выбранную ячейку ОЗУ запрещена;

   - блок  коррекции   ошибок   (генератор   кода   Хемминга)
обнаружил двойную или многократную ошибку;

   - обращение к физически несуществующему адресу памяти.

   Каждая ситуация сопровождается  своим  сигналом  на  общей
шине и поступает как внутреннее прерывание на блок прерываний
процессора.

   Прерывания  от  контроллеров   внешних   устройств   также
передаются  по  шине  данных  в  виде  унитарного  кода.  Все
прерывания  от  внешних  устройств  логически  суммируются  и
поступают на шину IRQ (запрос прерывания). Реагируя на сигнал
IRQ, процессор выдает, предварительно  захватив  общую  шину,
сигнал подтверждения  прерывания,  который  открывает  шинные
формирователи для выдачи активных прерываний на шину  данных.
Для сброса активных прерываний  процессор  производит  выдачу
принятых прерываний на шину данных.



            3.2.Многоуровневая организация ЭВМ.


   Аппаратные средства и  программное  обеспечение  логически
эквивалентны. Любая  выполняемая  программой  операция  может
быть реализована аппаратными средствами так же, как  и  любая
аппаратная   функция   может   быть   выражена   программными
средствами  /29/.  Граница  между  аппаратными  средствами  и
программным обеспечением постоянно меняется. С  точки  зрения
программиста  несущественно,  как   практически   реализованы

команды. Он, например, может использовать  команду  умножения
на традиционном машинном уровне как  аппаратную  команду,  не
зная или просто не принимая во внимание способ ее реализации.
В этом смысле  программное  обеспечение  для  одних  является
аппаратными  средствами  для  других.   Решение   о   способе
реализации каждой конкретной функции принимается на основании
таких факторов, как стоимость, скорость  вычислений,  емкость
памяти, надежность и частота ожидаемых изменений.

   Независимость работы  программиста  некоторого  уровня  от
способа  реализации  этого  уровня  позволяет   рассматривать
организацию   вычислительных   машин    как    многоуровневую
/13,29,20/ (рис.6). Это  -  известная  концепция  виртуальных
ЭВМ. Вычислительная машина с n уровнями может рассматриваться
как n различных виртуальных машин, каждая  из  которых  имеет
свой машинный язык.



              ┌────────────────────────────────┐
              │                                │
              │       уровень прикладных       │
              │                                │
              │       программ                 │
              │                                │
              │    ┌───────────────────────────┐
              │    │                           │
              │    │     уровень языков        │
              │    │                           │
              │    │     программирования      │
              │    │                           │
              │    │    ┌──────────────────────┐
              │    │    │                      │
              │    │    │  уровень операци-    │
              │    │    │                      │
              │    │    │  онной системы       │
              │    │    │                      │
              │    │    │    ┌─────────────────┐
              │    │    │    │                 │
              │    │    │    │ уровень системы │
              │    │    │    │                 │
              │    │    │    │ команд          │
              │                                │
              │╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌│
              │                                │
              │         микропрограммный       │
              │                                │
              │         уровень                │
              ├────────────────────────────────┤
              │                                │
              │         уровень                │
              │                                │
              │         аппаратных средств     │
              └────────────────────────────────┘
            Рис.6. Многоуровневая организация ЭВМ.
   Таким    образом,    набор    команд     и     организация
микропрограммного  уровня  соответствуют  набору   команд   и
организации аппаратных средств. Набор  команд  и  организация
традиционного машинного уровня определяются не аппаратными, а
микропрограммными средствами.

   Микропрограммирование можно рассматривать как самый нижний
из следующих трех программных уровней:

   1)программирование на  языках  высокого  уровня  (ФОРТРАН,
АЛГОЛ, PL/1, C).


   2)программирование на языке АССЕМБЛЕР;

   3)микропрограммирование.

   На  рис.6  выделенной   линией   показано   взаимодействие
микропрограммного  уровня  с  уровнем  операционной  системы,
уровнем языков программирования и прикладных программ.



             3.3.Традиционный машинный уровень.


   ФОРМАТЫ ДАННЫХ. ПРЕДСТАВЛЕНИЕ ЧИСЕЛ. Общий  формат  данных
МКБ-8601 в  основном  режиме  имеет  вид,  представленный  на
рис.7а (нумерация разрядов в слове - справа налево, начиная с
младших разрядов).

   Информационная часть слова содержит либо одно 64-разрядное
число, либо два 32-разрядных целых числа, либо 4 16-разрядных
фрагмента, либо 8 байтов, либо 64  бита,  либо  две  команды.
Длина команды МКБ - 32 разряда.


    72...65 64         .....................            1
   ┏━━━━━━━│━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
   ┃       │                                             ┃
а).┃  тег  │             информационная часть            ┃
           │
   ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
   64 63  .....  54 53 52        ..............         1
   ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
   ┃ │             │ │                                   ┃
б).┃ │   порядок   │ │         м а н т и с с а           ┃
   ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
    ↑               ↑
    │               │
     знак порядка    знак мантиссы
     32   31  .....  1    64  63       .......          1
   ┏━━━━│━━━━━━━━━━━━━┓ ┏━━━━│━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
   ┃    │             ┃ ┃    │                           ┃
в).┃знак│  ч и с л о  ┃ ┃знак│         ч и с л о         ┃
        │                    │
   ┗━━━━━━━━━━━━━━━━━━┛ ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
    32  ...  29 28  ...  21 20        .........         1
   ┏━━━━━━━━━━━│━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
   ┃           │           │                             ┃
г).┃модификатор│   к о п   │           а д р е с         ┃
               │           │
   ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
    32  ...  29 28  ...  21 20  ...  13 12    .....     1
   ┏━━━━━━━━━━━│━━━━━━━━━━━━━━━━━━━━━━━│━━━━━━━━━━━━━━━━━┓
   ┃           │           │           │                 ┃
д).┃модификатор│    3F     │   к о п   │    а д р е с    ┃
               │           │           │
   ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
Рис.7.а).Общий формат данных.
      б).Представление чисел с плавающей запятой.
      в).Представление целых 64 и 32-разрядных чисел.
      г).Команды основного формата.
      д).Команды дополнительного формата.
   Числа с плавающей запятой в МКБ  представляются  следующим
образом: 53 разряда мантисса и 11 разрядов порядок  (рис.7б).

Положительная мантисса представляется в прямом коде с  "0"  в
разряде  знака.  Отрицательная  мантисса   представляется   в
дополнительном коде с  "1"  в  разряде  знака.  Положительный
порядок представляется в прямом коде с "1" в  разряде  знака.
Отрицательный порядок - в дополнительном коде с "0" в разряде
знака.

   Положительные целые 64 и 32-разрядные числа представляются
в прямом коде, отрицательные - в дополнительном (рис.7в). Для
выполнения  арифметики   с   такими   числами   предназначены
отдельные   наборы   операций.   32-разрядные   числа   прямо
адресуются специальными командами,  исполнительные  адреса  в
которых 21-разрядные (за счет  индекс-регистров).  Аналогично
существуют команды для работы  с  16-разрядными  фрагментами,
байтами и битами. Разрядность исполнительного адреса  у  этих
команд равна соответственно 22, 23 или 26.

   ФОРМАТЫ КОМАНД. Длина каждой команды - 32  бита.  В  одном
слове размещается 2 команды. Формат команд имеет 2  структуры
(рис.7г,д), поэтому возможное число  кодов  операций  511.  В
основном формате команды 8 разрядов - код операции (КОП),  20
разрядов - адрес команды, являющийся,  как  правило,  адресом
операнда в ОЗУ. В дополнительном формате КОП -  16  разрядов;
это либо безадресные команды, либо команды, у которых в  поле
адреса занято не более 12 разрядов.

   20-й разряд адреса в команде  основного  формата  является
знаковым. Положительный адрес представляется в  прямом  коде,
отрицательный  -  в   дополнительном.   Предполагается,   что
программы пользователей располагаются в области положительных
адресов,  а  программы  операционной  системы  -  в   области
отрицательных. Разрядность всех индексных регистров равна 32.
В командах установки исполнительного  адреса  на  модификатор
знаковый  разряд  адреса   размножается   в   21-32   разряды
индекс-регистра.

   ФОРМИРОВАНИЕ ИСПОЛНИТЕЛЬНЫХ АДРЕСОВ. ПРЕФИКСАЦИЯ. У каждой
программы,    исполняющейся    в    машине,    имеется     16
индекс-регистров или модификаторов (М),  предназначенных  для
модификации  адреса,  указанного   в   команде.   Разрядность
индексных регистров - 32. Модификация  выполняется  сложением
содержимого указанного в команде индекс-регистра  с  адресной
частью команды. Старший разряд адресной части  команды  перед
модификацией размножается до 32 разряда.


   Имеются  специальные  команды  UTC  и   WTC,   позволяющие
осуществлять модификацию адреса следующей за ними команды.  В
этих  случаях  для  модификации  используются  соответственно
исполнительный адрес или содержимое слова по  исполнительному
адресу команд UTC и  WTC,  которые  заносятся  в  специальный
регистр  (С)  с  номером  16.  Одновременно   устанавливается
признак изменения адреса (ПИА) в регистре режимов (РР).

   Исполнительный  адрес   большинства   команд   формируется
следующим образом /51,52/.

   Адрес типа U:

      U = N + М (ПИА=0)   или   U = N + М + С (ПИА=1).

   Адрес типа V:

          V = N (ПИА=0)   или   V = N + С (ПИА=1),

   где N - адресная часть  команды,  С  -  содержимое  16-ого
индекс-регистра,  M  -  содержимое   указанного   в   команде
модификатора.

   Значение 16-ого  регистра  добавляется  к  исполнительному
адресу только при  ПИА=1.  Все  команды,  кроме  UTC  и  WTC,
обнуляют этот признак. С  помощью  команд  UTC  и  WTC  может
осуществляться модификация адреса любой кратности.

   Вычисленный   таким   образом    адрес    является    либо
математическим   (виртуальным)    адресом    слова    памяти,
содержащего операнд, либо самим операндом.

   МАГАЗИННОЕ  ОБРАЩЕНИЕ.  В  машине  обеспечена  возможность
адресации к любому участку  оперативной  памяти  по  принципу
"магазина",  если  адрес  в   команде   равен   0   и   номер
индекс-регистра,  используемый  для  модификации,  равен  15.
Индексный регистр с номером 15 является указателем магазина и
содержит адрес первого свободного слова этой области  памяти.
Обращение к памяти "магазинным способом" выполняется во  всех
командах записи или чтения из памяти  целого  слова,  если  в
разрядах  номера  индекс-регистра  указан  15-ый  регистр   и
исполнительный адрес команды (N  или  N+C)  содержит  нулевой
код. Иначе обращение к ОЗУ происходит по адресу  типа  U  без
изменения счетчика магазина.

   Кроме того, существуют специальные магазинные команды, при
выполнении которых собственно операции предшествует запись  в
"магазинную память" содержимого  сумматора  (XTS,  ITS),  или
операция сопровождается последующим  чтением  из  "магазинной
памяти" (STX, STI, UZAS, UIAS). Содержимое индекс-регистра  и

адресной  части  в  такой  команде  определяют  адрес   самой
операции и не влияют на обращение к "магазину".

   ТЕГ. В архитектуру  МКБ-8601  введен  тег,  что  позволяет
осуществлять пословную защиту памяти от  несанкционированного
доступа и организовать удобную отладку программ. Тег занимает
72÷65 разряды слова  памяти.

   Назначение отдельных разрядов тега:

   65 разряд - различает команды и числа.

0 - число, 1 - команда. При попытке выборки числа в  качестве
команды происходит внутреннее прерывание "контроль  команды".
Команды, так же  как  и  числа,  могут  быть  использованы  в
качестве операндов.  При  записи  в  память  65  разряд  тега
устанавливается равным  значению  признака  записи  команд  в
регистре РРР (расширение регистра  режимов),  копия  которого
находится  в  теге  результата  (аналог  признака   командной
свертки в БЭСМ-6). Обычно в режиме математика признак  записи
команд равен 0.

   66 разряд - различает две группы команд:

0 - команды основного режима, 1 - команды эмулятора.

Для чисел этот разряд используется аналогичным образом.

   67 - разрешено (0) или запрещено (1) чтение операнда.

   68 - разрешена (0) или запрещена (1) запись операнда.

Комбинация: "чтение запрещено", а  "запись  разрешена"  может
создаваться   загрузчиком   для   обнаружения   обращений   к
неинициализированным переменным.

   69 - разрешена (0) или запрещена (1) выборка команды (т.н.
останов по номеру команды).

   70 - разрешена (0) или запрещена (1)  передача  управления
на эту команду.

   71 - резерв.

   72 - признак   программной   (1)   или   аппаратной    (0)
интерпретации тега. При установке 72 разряда в "1"  присходит
внутреннее   прерывание   "программная   интерпретация   тега
команды" или "программная интерпретация тега операнда".

   При чтении слова из памяти все разряды тега проверяются на
предмет  возможной  защиты  и  соответствия   режиму   работы
процессора. Прерывания,  возникающие  при  этом,  могут  быть
блокированы соответствующими признаками из РР. При  записи  в
память тег пишется из регистра тега результата, который может
быть  сформирован  программно.  При  записи  также   возможно

прерывание по тегу.

   ПРИПИСКА И  ЗАЩИТА  ПАМЯТИ.  При  обращении  в  память  за
числами и  командами  20÷11  разряды  исполнительного  адреса
слова определяют номер регистра приписки (РП): 0,1,...,1023 и
при отсутствии блокировки приписки заменяются  на  содержимое
поля номера физической страницы из этого  РП.  Очевидно,  что
часть виртуальной  памяти  должна  использоваться  для  целей
операционной  системы.  Программам  пользователей  эта  часть
памяти должна быть  ограниченно  доступна.  Поэтому  в  схему
приписки введена проверка виртуального номера страницы.

   В режиме диспетчера разрешается обращаться  за  числами  и
командами ко всем виртуальным страницам, в режиме  математика
- только к  страницам  с  положительными  номерами.  Проверка
может быть блокирована  соответствующим  признаком  в  РР.  В
режиме диспетчера он установлен  всегда,  а  перед  входом  в
режим математика - устанавливается операционной системой.

   Формат регистра приписки:

   8÷1 - поле номера  процесса  (ПНП),  использующего  данный
регистр приписки. При  обращениях  в  память  содержимое  ПНП
каждый раз сравнивается с РНП -  регистром  номера  процесса.
При  несовпадении  возникает  прерывание   "чужой   РП",   за
исключением случая, когда в ПНП - число 255. Страница с  этим
номером доступна всем процессам. РНП переустанавливается  при
смене процесса на процессоре.

   9 - бит защиты страницы по записи. "0" вызывает прерывание
при записи в любое слово из этой страницы.

   10 - бит защиты страницы по обращению (чтение или запись).
"0" вызывает прерывание при обращении  к  любому  слову  этой
страницы.

   20÷11  -  поле  номера  физической  страницы,   заменяющее
старшие разряды исполнительного адреса.

   В режиме диспетчера обращение к  памяти  также  происходит
через схему приписки и защиты.

   РЕГИСТРЫ.  Всего  в  ЦП  имеется  1024  32-разрядных,   16
64-разрядных и ряд специальных регистров.

   32-разрядные регистры делятся на группы  по  32  регистра.
Для выбора группы достаточно записать в регистр номера группы
(РНГ) код, определяющий группу регистров.

   Каждому  процессу,  занимающему   центральный   процессор,
отводится одна или несколько  групп  32-разрядных  регистров,

16 из которых - индекс-регистры и  могут  использоваться  для
модификации  адреса  команды,  остальные  регистры   доступны
только  привилегированными  командами  чтения-записи.  Это  -
регистр режимов (РР),  старшие  разряды  регистра  и  таймера
счетного времени процесса, указатель стека для записи адресов
возврата  из  подпрограмм  и  область  упрятывания  регистров
общего назначения.



               3.4.Микропрограммный уровень.


   Наиболее типичным  приложением  блока  с  микропрограммным
управлением является использование его в качестве  устройства
управления машины. Здесь  в  его  функции  входят  выборка  и
исполнение команд машинного уровня. На рис.8  показана  общая
схема ЭВМ с микропрограммным управлением.

   В любой ЭВМ может быть выделено два следующих устройства:

   1.устройство управления, роль которого в  микропрограммной
ЭВМ выполняет блок микропрограммного управления (БМПУ);

   2.операционное устройство, содержащее технические средства
для хранения, передачи и преобразования информации.



 МИКРОПРОГРАММНАЯ ЭВМ
┌──────────────────────────────────────────────────────────┐
│                                                          │
│                                                          │
│          ЦЕНТРАЛЬНЫЙ ПРОЦЕССОР                           │
│                                                          │
│                                                          │
│          ╔═══════════════════════════════╗               │
│          ║                               ║            П  │
│          ║УСТРОЙСТВО    ОПЕРАЦИОННОЕ     ║               │
│          ║                               ║            ЕУ │
│          ║УПРАВЛЕНИЯ     УСТРОЙСТВО      ║               │
│          ║                               ║            РС │
│          ║          ┌───────────────────┐║               │
│┌───────┐ ║┌───────┐ │┌───────┐ ┌───────┐│║ ┌───────┐  ИТ │
││       │ ║│ блок  │ ││       │ │       ││║ │       │     │
││память:│ ║│       │ ││       │ │       ││║ │       │  ФР │
││       │ ║│ микро-│ ││       │ │       ││║ │ ввод/ │     │
││       │ ║│       │ ││регист-│ │ аппа- ││║ │       │  ЕО │
││       ┌→║│програм┌→││       ┌→│       ││║→│ вывод │→    │
││ прог- │ ║│       │ ││  ры,  │ │ратная ││║ │       │  РЙ │
││       │ ║│-много │ ││       │ │       ││║ │       │     │
││рамма +│←║│       │←┐│память │←┐       ││║←┐ конт- │←╴ИС │
││       │ ║│ управ-│ ││       │ │логика ││║ │       │     │
││данные │ ║│       │ ││       │ │       ││║ │роллеры│  ЙТ │
││       │ ║│ ления │ ││       │ │       ││║ │       │     │
│          ║          │                   │║            НВ │
│└───────┘ ║└───────┘ │└───────┘ └───────┘│║ └───────┘     │
│          ║          └───────────────────┘║            ЫА │
│          ║                               ║               │
│                                                       Е  │
│          ╚═══════════════════════════════╝               │
│                                                          │
│                                                          │
└──────────────────────────────────────────────────────────┘
         Рис.8. ЭВМ с микропрограммным управлением.
   БЛОК  МИКРОПРОГРАММНОГО  УПРАВЛЕНИЯ.  УПРАВЛЯЮЩАЯ  ПАМЯТЬ.
Блок    микропрограммного    управления     /8/     управляет
функционированием   операционного   устройства   с    помощью
последовательности микрокоманд. Аппаратура  сопряжения  между
ними состоит из двух  типов  управляющих  сигналов.  Сигналы,

выходящие  из  устройства  управления,  передают  управляющие
сигналы на  функциональные  блоки  операционного  устройства.
Управляющие  сигналы  от  операционного  устройства  передают
информацию  о  состоянии   функциональных   блоков,   которую
устройство управления использует  для  выбора  или  изменения
порядка    исполнения    интерпретирующих     процедур.     В
микропрограммной     ЭВМ     последовательное      исполнение
микроинструкций  используется  для  того,   чтобы   выполнить
различные команды, требуемые от машины. Все эти  элементарные
задачи, выполняемые машиной для исполнения  машинных  команд,
называются   микропрограммами.   Микропрограмма    фактически
управляет хранением, передачей и преобразованием информации в
физических  компонентах   системы,   таких,   как   регистры,
сумматоры,  внутренняя  память  процессора,  линии   передачи
данных и аппаратная логика.  Область  хранения  микропрограмм
называется управляющей или микропрограммной памятью.


 АДРЕС    ВЕКТОР ПРЕ-    НР 15 КОП    НР 15 КОП    РЭ 15 КОП
                          │            │            │
РЕГИСТРА    РЫВАНИЙ    ПИА│ ИР ОФ   ПИА│ ИР ДФ   ПИА│ ИР РЭ
   ││          ││       │ │  │ ││    │ │  │ ││    │ │  │ ││
   ││          ││       │ │  │ ││    │ │  │ ││    │ │  │ ││
   ││          ││       │ │  │ ││    │ │  │ ││    │ │  │ ││
   ││          ││              ││           ││         │ ││
   \/          \/       ↓ ↓  ↓ \/    ↓ ↓  ↓ \/    ↓ ↓  ↓ \/
┏━━━━━━━┓   ┏━━━━━━━┓   ┏━━━━━━━┓    ┏━━━━━━━┓    ┏━━━━━━━┓
┃       ┃   ┃       ┃   ┃       ┃    ┃       ┃    ┃       ┃
┃ П Н А ┃   ┃ П Н А ┃   ┃ П Н А ┃    ┃ П Н А ┃    ┃ П Н А ┃
┃       ┃   ┃       ┃   ┃       ┃    ┃       ┃    ┃       ┃
┃       ┃   ┃       ┃   ┃       ┃    ┃       ┃    ┃       ┃
┃ чт/зп ┃   ┃ преры-┃   ┃ команд┃    ┃ команд┃    ┃ команд┃
┃       ┃   ┃       ┃   ┃       ┃    ┃       ┃    ┃       ┃
┃       ┃   ┃       ┃   ┃       ┃    ┃       ┃    ┃       ┃
┃рег-ров┃   ┃ ваний ┃   ┃ осн.ф.┃    ┃ доп.ф.┃    ┃   РЭ  ┃
┗━━━━━━━┛   ┗━━━━━━━┛   ┗━━━━━━━┛    ┗━━━━━━━┛    ┗━━━━━━━┛
    │           │           │            │            │
    │           │           │            │            │
    │
    ↓─────↑─────↓────┬──────↓────────────↓────────────↓
          │          │
          │
          │    ┏━━━━━↓━━━━━━┓
          │    ┃            ┃     ┏━━━━━━━━━━━━━┓
          │    ┃  селектор  ┃     ┃             ┃
          │    ┃            ┃     ┃             ┃
          │    ┃   адреса   ┃────→┃ ПЗУ/ОЗУ  МП ┃
          │    ┃            ┃     ┃             ┃
          │    ┃микрокоманды┃
          │                       ┗━━━━━━━━━━━━━┛
          │    ┗━━━━━━━━━━━━┛            │
          │                              │
          │                              ↓
          │           ┏━━━━━┳━━━━━━━━━━━━━━━━━━━━┓
          │           ┃     ┃                    ┃
          │           ┃адрес┃  управляющие поля  ┃ КР
          │
          │           ┗━━━━━┻━━━━━━━━━━━━━━━━━━━━┛
          │              │     │ │ │ │ │ │ │ │ │
          │              │     │ │ │ │ │ │ │ │ │
          │
           ←─────────────↓     ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓
                                  управляющие
                                    сигналы
          Рис.9.Блок микропрограммного управления.
   Блок  микропрограммного  управления  МКБ-8601  состоит  из
памяти  микропрограмм  и   микропрограммного   управления   с
устройством  определения  адреса  следующей  микроинструкции,
преобразователей начального  адреса  микропрограммы  (ПНА)  и
конвейерного регистра (КР) (рис.9).


   Преобразователь начальных адресов - это переключатель  для
выборки  адреса  начала   обрабатывающей   микропрограммы   в
зависимости  от  кода  на  входе  преобразователя.  По   коду
операции  команды  (КОП)  из  ПНА  выбирается  адрес   начала
микропрограммы исполнения соответствующей команды. Так как  в
основном режиме формат команд имеет 2 структуры, то  обе  эти
группы   команд   переадресуются   к    управляющей    памяти
микропрограмм  каждая  через  свой  ПНА  (ПНА   основного   и
дополнительного формата). У команд режима эмуляции (РЭ) также
свой ПНА,  т.к.  в  общем  случае  исполнение  команды  в  РЭ
отличается от исполнения такой же команды в основном режиме.

   Для определения начальных адресов микропрограмм  обработки
прерываний в ЦП имеется переключатель по  вектору  прерываний
(ПНА прерываний),  для  доступа  к  специальным  регистрам  -
переключатель   по   номеру   регистра   (ПНА   чтения/записи
регистров). Содержимое всех ПНА определяется автоматически  в
процессе трансляции и загрузки МП.

   Функция определения следующей микроинструкции  заключается
в выборе  источника  адреса  следующей  микроинструкции.  Это
может  быть  адрес,  заданный  в  поле  адреса   исполняеммой
микрокоманды,  адрес  из   микропрограммного   стека,   адрес
последней микрокоманды, увеличенный на 1, адрес,  вычисленный
в микропрограмме,  или один из ПНА.

   Управляющая  память  исполнена   в   виде   ОЗУ   и   ПЗУ.
Подпрограммы, реализующие команды, сначала размещаются в  ОЗУ
микропрограмм, а затем по мере отладки переписываются в  ПЗУ.
Исполняющаяся   микрокоманда    из    памяти    микропрограмм
переписывается  в  конвейерный  регистр,  откуда   посылаются
управляющие сигналы ЦП и ОЗУ. Объем памяти микропрограмм - 4К
112-разрядных слов, из которых 2К - ОЗУ, 2К - ПЗУ.

   После  включения  МКБ  из  пультового  процессора  в   ОЗУ
загружается   часть    микропрограмм.    Затем    запускается
микропрограмма   инициализации,   приводящая   в    начальное
состояние ЦП и  устанавливающая  ряд  специальных  регистров.
Инициализация   заканчивается   передачей    управления    на
микропрограмму выборки  командного  слова  по  фиксированному
адресу. После выборки командного слова по  коду  операции  из
ПНА выбирается адрес  начала  микропрограммы  соответствующей
команды.  Последовательность  исполнения  микрокоманд   может
изменяться в зависимости от состояния функциональных блоков в

операционном   устройстве   (например,   в   зависимости   от
результата  операции  в  АЛУ).  При  исполнении   команды   в
микропрограмме  могут  быть  условные  передачи   управления,
переходы к подпрограммам, циклы и т.д. В командном слове  МКБ
размещается 2  команды,  поэтому  при  переходе  к  следующей
команде  устанавливается  признак  либо  левой,  либо  правой
команды в зависимости  от  того,  какая  команда  по  порядку
должна исполняться. Выполнение команды заканчивается выборкой
следующего командного слова, если выполнена правая команда, и
переходом по адресу из ПНА команд в зависимости от очередного
кода операции.

   ОСНОВНЫЕ ОПЕРАЦИОННЫЕ БЛОКИ ПРОЦЕССОРА УРОВНЯ МИКРОМАШИНЫ.
На рис.10 показана организация микропрограммного уровня МКБ с
двумя   внутренними    информационными    шинами,    которая,
обеспечивая необходимую  свободу  и  гибкость  в  управлении,
является в то же время достаточно простой.


                 ┌───────┐     ┌───────┐
                 │       │     │       │
                 │стандар│     │ ППЗУ  │
                 │       │     │       │
                 │тизатор│     │ конс- │
                 │       │     │       │
                 │команд │     │ тант  │
                 └───┬───┘     └───┬───┘
                     │             │
 шина D
                     ↓             ↓
╶──────────────────────────────────────────────────────────
╶──────────────────────────────────────────────────────────
    ↑         │         ↑         ↑         ↑         ↑
    │         │         │         │         │         │
                        │         │         │         │
    ↓         ↓
┌───────┐ ┌───────┐ ┌───────┐ ┌───────┐ ┌───────┐ ┌───────┐
│       │ │       │ │       │ │       │ │       │ │       │
│  БОИ  │ │АЛУ,ре-│ │модифи-│ │ сдви- │ │ поиск │ │учет ак│
│       │ │       │ │       │ │       │ │       │ │       │
│данных │ │       │ │       │ │       │ │ левой │ │тивнос-│
│       │ │гистры │ │каторы │ │гатель │ │       │ │       │
│       │ │       │ │       │ │       │ │единицы│ │ти стр.│
└───────┘ └───┬───┘ └───────┘ └───────┘ └───────┘ └───────┘
    ↑         │         ↑         ↑         ↑         ↑
    │         │         │         │         │         │
                        │         │         │         │
    ↓         ↓
╶──────────────────────────────────────────────────────────
╶──────────────────────────────────────────────────────────
          ↑            ↑            ↑            │
 шина Y   │            │            │            │
      ┌───↓───┐    ┌───↓───┐    ┌───↓───┐    ┌───↓───┐
      │       │    │       │    │       │    │       │
      │       │    │припис-│    │ блок  │    │останов│
      │  БОИ  │    │       │    │       │    │       │
      │       │    │  ка   │    │ связи │    │   по  │
      │  тега │    │       │    │       │    │       │
      │       │    │адреса │    │ с ПП  │    │адресу │
      └───────┘    └───────┘    └───────┘    └───────┘
 Рис.10. Основные операционные блоки ЦП уровня микромашины.
   Перечислим основные операционные блоки процессора МКБ-8601
уровня микромашины:

   - блок обмена информацией (БОИ) с общей шиной (64  разряда
для команд и данных и 8 разрядов для тега);

   - блок микропроцессорных секций (МПС),  содержащий  АЛУ  и
регистры;


   - регистровый пул, содержащий 1024 модификатора;

   - блок однотактного  сдвига  на  любое  число  разрядов  в
пределах 64-разрядного слова (сдвигатель);

   - блок поиска левой единицы;

   - блок учета активности страниц памяти;

   - стандартизатор команд, преобразующий  команды  БЭСМ-6  к
общему виду команд МКБ-8601  с  8-разрядным  кодом  операции,
схема размножения знака адресной части команды;

   - ППЗУ констант;

   - блок преобразования  виртуальных  адресов  в  физические
(приписка адреса);

   - блок связи с пультовым  процессором,  состоящий  из  ОЗУ
обмена, микропроцессора со своими ПЗУ и ОЗУ для  обслуживания
линии связи с пультовым процессором и загрузки микропрограмм;

   - блок останова работы программы по заданному адресу;

   - блок обработки внешних  и  внутренних  прерываний  (этот
блок и все перечисленные ниже на рис.10 не указаны,  т.к.  не
имеют выхода на шины D и Y);

   - арбитр шины;

   - микропрограммно-управляемый тактовый генератор и др.



              3.5.Микропрограммная инструкция.


              Структура микрокомандного слова.


   Машинные команды принципиально отличаются  от  управляющих
микропрограммных инструкций. Команды машинного уровня  обычно
занимают от 8 до 48 разрядов и задают код операции,  источник
операнда и приемник результата в  виде  явного  или  неявного
указания номера регистра или адреса памяти.  Микропрограммная
инструкция занимает обычно от 32 до 128 и больше  разрядов  в
типичной  ЭВМ  и  задает  управляющие  сигналы   для   выбора
источника операнда АЛУ, функцию АЛУ, приемника АЛУ, управляет
переносом,  сдвигом,  прерыванием,   входными   и   выходными
данными, проверяет сигналы условий  и  т.д.,  т.е.  управляет
всеми  компонентами  ЦП  уровня  микромашины.  Большое  число
разрядов в  микрокомандном  слове  связано  с  необходимостью
управления    большим    числом    параллельно     работающих
функциональных блоков.

   Общее  число   сигналов,   находящихся   под   управлением
микропрограммы, около 300. Однако в действительности  не  все
они   используются   одновременно.   Оптимизация    структуры

микропрограммного уровня заключается в  том,  чтобы  избежать
ненужных информационных каналов,  лишних  вентильных  схем  и
избыточных разрядов в микрокоманде.

   Для обеспечения высокой степени параллелизма в  управлении
наиболее  важными  и  часто  используемыми  блоками   в   МКБ
используется   горизонтальная   структура   микропрограммного
слова,  когда  отдельный  бит  микрокоманды   непосредственно
управляет одним сигналом /1,7,53/. Но, как правило, на данном
управляющем   шаге   требуется   "активизировать"   небольшое
количество управляющих сигналов. Недопустимость более  одного
сигнала, управляющего выдачей информации  на  одну  из  линий
передачи  данных,  и  необходимая   достаточность   в   числе
сигналов,  управляющих  записью,  позволяют  группировать   и
кодировать эти взаимно исключающие сигналы. Экономия в  числе
разрядов,  полученная  таким  образом,  приблизительно  равна
N/log N, где N - число  разрядов,  кодируемых  в  одном  поле
     2
микропрограммы.

   Для большего сокращения длины микрокомандного слова  можно
менять смысловое содержание разрядов при переходе  от  одного
управляющего шага к  другому.  Это  приводит  к  вертикальной
структуре  микропрограммного  слова,  когда  для  определения
того,  какие  именно  управляющие  сигналы  "активизированы",
добавляется выбор режима /7/.

   Таким образом, формат микропрограммного слова  в  МКБ-8601
является  в  основном  горизонтальным   и   горизонтально   -
кодированным   с   элементами   вертикальной   структуры.   В
микрокоманде МКБ-8601 28 кодируемых  полей,  три  из  которых
имеют   разное   смысловое   значение   в   зависимости    от
дополнительных  разрядов,  и  20  разрядов   слова   являются
непосредственно     управляющими     при     общей      длине
микропрограммного  слова  в  112   разрядов.   Список   полей
микрокомандного слова и их назначение приведен  в  приложении
А.



              3.6.Язык микропрограммирования.


   Назначение и свойства языков микропрограммирования описаны
в   /1,7,29,10,54-59/.    Языки    микропрограммирования    и
программирования во многом  схожи  между  собой,  но  есть  и
различия. Одно из различий заключается в степени параллелизма
выполнения  операций.  Например,  одна   микрокоманда   может

вызвать одновременное  выполнение  нескольких  межрегистровых
передач.  Желательно,   чтобы   языки   микропрограммирования
обладали возможностями описания аппаратных  средств  системы,
такими, как регистры, память, линии передачи  данных,  в  том
числе  параллельные,  описывали  состав   слова   управляющей
памяти.   Они   должны   быть   также    хорошим    средством
документирования.  Язык  микропрограммирования  часто  бывает
связан   с   автоматизированной    системой    проектирования
микропрограмм /1,7,43/.  Тогда  в  нем  может  быть  описание
структурных свойств системы и ее поведения. Степень  описания
различных  свойств  системы  зависит  от   степени   контроля
логической     структуры,      возлагаемого      на      язык
микропрограммирования.

   Микропрограммирование    является    более    трудной    и
утомительной процедурой, чем написание и  отладка  прикладных
программ, в силу того, что в  процессе  микропрограммирования
приходится  иметь   дело   с   гораздо   более   сложными   и
взаимосвязанными внутренними процессами обработки информации.
Для уменьшения этих проблем язык микропрограммирования должен
быть машинно - независимым языком высокого уровня /56,57/. Но
для этого нужно определить машинно  -  зависимые  конструкции
языка высокого уровня, потенциальное количество  которых  для
сложных  машин  может  достигать  нескольких   сотен   /1,7/.
Определение этих конструкций и их описание  представляют  для
микропрограммиста и системы трансляции микрокоманд сложную  и
громоздкую    задачу.    Кроме    того,    эти    конструкции
замаскировывают   внутренние   действия,    происходящие    в
аппаратуре.   Однако   наибольшее   препятствие    на    пути
использования языков высокого  уровня  и  самая  трудная  для
решения проблема связаны с задачей оптимизации.

   Язык микропрограмирования более низкого  уровня  позволяет
создавать  более  эффективные  микропрограммы,   но   требует
высокой  степени  детализации,  что  вызывает  дополнительные
осложнения, например, уменьшает "понимаемость" микропрограмм.
Так как объем памяти микропрограмм на 3 порядка меньше памяти
программ,  обшее  число  микроопераций   относительно   мало,
поэтому можно использовать языки типа ассемблера.

   При создании МКБ использовался микроассемблер,  являющийся
частью кросс-системы подготовки  микропрограмм,  описанной  в
/42/.


   Каждая микрокоманда состоит из фиксированного числа частей
(полей)   заранее   определенных   размеров.    Для    работы
микроассемблера необходим словарь, в  который  заносятся  все
описания  и  константы,  используемые  в  микропрограмме.   В
словаре заводится строка на каждое описание  и  константу,  в
которой  содержатся  атрибуты   данного   описания.   Словарь
структуры слова управляющей памяти  содержит  описания  полей
микрокомандного  слова:  мнемонические  имена  полей   и   их
значения, позицию в слове, размерность  и  допустимый  список
значений. Словарь для описания констант состоит  из  описания
размерности ПЗУ констант и значений констант. Таким  образом,
каждое одноразрядное поле или значение  многоразрядного  поля
соответствуют  какому-либо   управляющему   сигналу,   номеру
регистра или адресу памяти.

   Функция микроассемблера заключается в том, чтобы присвоить
отдельным разрядам или  группе  разрядов  управляющего  слова
значение мнемонического имени  из  этого  словаря  и  создать
битовую строку постоянной длины -  микрокод.  Универсальность
его  заключается  в  способности  настраиваться  на  заданный
формат микрокоманды. Описание полей микрокомандного  слова  и
присвоение мнемонических имен полям и значениям  полей,  т.е.
создание   словаря,    производится    программистом    перед
трансляцией  микрокоманд.  Поле  адреса  микрокоманды  и  код
операции  БМПУ,  управляющий  последовательностью  исполнения
микрокоманд,  имеют  фиксированные  позиции  в строке.   Одна
строка микроассемблера транслируется в одну микрокоманду. Все
действия, описанные в одной и той же  строке  микропрограммы,
выполняются параллельно.



             3.7.Способы контроля микрокоманд.


   Проверка    логической     корректности     микропрограмм,
управляющих работой  процессора,  осуществляется  посредством
моделирования   логической   структуры   ЭВМ   и   выполнения
микропрограмм  на  этой   модели.   Для   выявления   случаев
неправильного   микропрограммного    управления    элементами
логической структуры существует несколько методов  /7/.  Один
из них состоит в формировании  таблицы  действий,  допустимых
для данной  логической  структуры,  которую  можно  задать  в
качестве входного параметра ее описания. Другой метод состоит
в  формировании  указателей  от  каждой  записи   в   таблице

операторов  к  операндам,  описывающим  элементы   логической
структуры, которые  можно  использовать  с  этим  оператором.
Систему автоматизации  проектирования,  обеспечивающую  этапы
формирования и проверки корректности  микропрограмм,  выпуска
документации,  а  также  файловую  систему  для  хранения   и
обновления наборов данных о проекте изделия  в  процессе  его
изготовления и последующей эксплуатации, можно в полной  мере
выполнить   только    в    крупных    фирмах,    занимающихся
проектированием и изготовлением вычислительных машин.

   В процессе работы над проектом  МКБ  была  создана  только
логическая  модель   ЦП,   выполнить   же   полную   проверку
корректности микропрограмм,  реализующих  выбираемые  из  ОЗУ
команды, в силу  ограниченных  возможностей  системы  "Пульс"
было невозможно. Поэтому  было  проведено  только  логическое
моделирование ЦП и проверка структуры микрокомандного  слова,
а также  проверка  отдельных  наиболее  сложных  микрокоманд.
Окончательная отладка микропрограмм на реальной аппаратуре не
представляла большой сложности, поскольку  часть  управляющей
памяти выполнена в виде ОЗУ.

   В  общем  случае,  микроассемблер  "не  знает"  назначения
отдельных полей  микрокоманды  и  логики  их  взаимодействия.
Однако некоторые простые правила можно ему задать.  В  данном
разделе  описывается  контроль  микрокоманд,   проводимый   с
помощью  таких  правил  микроассемблера   без   использования
логической модели ЦП.

   1.Почти в каждой микрокоманде описывается передача  данных
от источника  информации  к  приемнику  через  цепи  передачи
данных, причем приемников информации может быть несколько,  а
источник - только один. Все независимые источники  информации
на шины описываются  разными  полями.  Перед  микропрограммой
формируется список недопустимых фраз, состоящий из комбинаций
полей, которые приводят более чем к одному источнику на линию
передачи данных. Микроассемблер каждую микрокоманду проверяет
на   несоответствие   этой   конструкции.    Таким    образом
производится контроль количества  независимых  источников  на
внутрение шины ЦП МКБ.

   2.Для каждого  поля  можно  задать  список  его  возможных
значений,  проверяемый  микроассемблером.  Тогда   в   каждой
микрокоманде  в  выражении,  задающем  значение  поля,  могут
встретиться только значения поля из его списка. Таким образом

осуществляется контроль принадлежности  мнемонического  имени
значения поля к конкретному полю.

   Кроме того, для  наиболее  часто  употребляемых  операций,
включаемых в микрокоманды, заготовлены синтаксические  фразы,
допустимые для данной логической структуры. Используются  они
с помощью аппарата макросов микроассемблера.



                  3.8.Совмещение операций.


   Для выполнения  команды  обычно  требуется  одно  или  два
обращения  к  основной  памяти  и  в  среднем  не  меньше  10
обращений  к  микропамяти.  Когда  микропрограмма  инициирует
доступ к основной памяти, проходит много циклов  микропамяти,
прежде чем необходимое слово поступит в буферный регистр.  ЦП
бездействует, ожидая конца цикла основной памяти.

   Для увеличения скорости доступа к данным в МКБ введен кэш.
Являясь неотъемлемой  частью  ЦП,  кэш  немедленно  порождает
классическую   для   многопроцессорной    системы    проблему
своевременного обновления данных памяти. Эта проблема  решена
в МКБ следующим образом:

   - "сквозная"  запись,  т.е.  в  операциях  записи   данные
одновременно попадают не только в кэш, но и в память;

   - сброс кэша при внешних прерываниях или по требованию ОС;

   - микропрограммный сброс кэша при внутренних  прерываниях,
когда может произойти несоответствие данных ОЗУ и кэша.

   Существует  ряд  различных  способов  совмещения  машинных
операций  во  времени.  Например,   совмещение   адресных   и
арифметических    операций,    выполняемых     адресным     и
арифметическим устройствами соответственно. При  этом,  когда
арифметическое устройство выполняет  одну  команду,  адресное
проводит  все  подготовительные   операции   для   следующей.
Возможно  и  большее  опережение.  Например,  если  очередная
команда есть некоторая операция с регистрами, находящимися  в
адресном  устройстве,  ее   можно   выполнить   раньше,   чем
закончится предыдущая  команда  в  арифметическом.  Но  тогда
возникает проблема  определения  точного  адреса  прерывания,
если,  например,  произошло  переполнение  в   арифметическом
устройстве. Более важный случай, когда происходит  страничное
прерывание при выборке операнда, и адрес прерывания необходим
для определения номера страницы. Более того, при  опережающем
исполнении команды в  адресном  устройстве  может  измениться

содержимое регистров,  участвовавших  в  формировании  адреса
предыдущей  команды,   при   выполнении   которой   произошло
прерывание.  Вычисление  адреса  при   повторном   исполнении
команды  будет  неверным.  Решением   проблемы   может   быть
дублирование   регистров   и   признаков,    участвующих    в
формировании адреса, по числу  опережающих  команд.  Все  эти
варианты  распараллеливания  операций  были   рассмотрены   в
процессе работы над проектом МКБ и были отвергнуты, т.к.  все
они приводят к значительному усложнению  аппаратуры  и  более
сложным микропрограммам.

   Распараллеливание  операций  в  МКБ  происходит  только  в
пределах одной команды: в микропрограмме  во  время  ожидания
конца цикла  обращения  к  памяти  выполняются  промежуточные
вычисления, если в них есть необходимость.
