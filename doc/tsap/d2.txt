   II.Методика и инструментальные средства для создания,


    контроля и обслуживания универсальной ЭВМ МКБ-8601.

   Как уже отмечалось  выше,  микропрограммирование  является
средством  обеспечения  архитектуры  ЭВМ,  поэтому  в  работе
основное внимание уделяется  методике  создания  и  настройки
ахитектуры ЭВМ.

   Предлагаемая  методика  создания   и   настройки   ЭВМ   с
использованием   микропрограммирования   включает   следующие
этапы:

   1)определение архитектуры создаваемой ЭВМ  и  проверка  ее
эффективности с помощью программного имитатора;

   2)проверка возможности реализации заданной архитектуры  на
логической модели;

   3)создание   комплекса   микропрограммных   средств    для
обеспечения заданной архитектуры;

   4)модификация микропрограммного обеспечения для  изменения
архитектуры с целью настройки ее на решение конкретных задач,
в частности - на эмуляцию ЭВМ БЭСМ-6.

                     ┌───────────────┐   ┌───────────────┐
                     │               │   │               │
                     │   "Пульс"     │   │               │
                     │               │   │  Программный  │
                     │  логическое   │   │               │
                     │               │   │  имитатор МКБ │
                     │ моделирование │   │               │
                                     │                   │
                     └───────┬───────┘   └───────┬───────┘
                             │                   │
                       /40/  │                   │  /34/
                             │                   │
                             │                   │
 ┌───────────────┐   ┌───────────────┐   ┌───────────────┐
 │               │   │               │   │               │
 │               │   │ Кросс-система │   │ Кросс-система │
 │  Техническое  │   │               │   │               │
 │               │   │  подготовки   │   │  подготовки   │
 │ проектирование│   │               │   │               │
 │               │   │ микропрограмм │   │   программ    │
                 │
 └───────┬───────┘   └───────┬───────┘   └───────┬───────┘
         │                   │                   │
   /76/  │              /42/ │                   │ /36,37/
         │                   │                   │
         ╶──────────────┐    │    ┌──────────────╴
                        │    │    │
                        │    │    │
                        │    │    │
                 ┌───────────────────────┐

                 │                       │
                 │    Файловый сервер    │
                 │                       │
                 │   БЭСМ-6 ╶─╴ IBM PC   │
                 └───────────┬───────────┘
                             │
                                                  ┌───┐
                             ↓                    │   │
                         ╔══════╗                 │   │
                         ║      ║            ┏━━━━━━━━━━━━━┓
                         ║      ║            ┃││││││││     ┃
                         ║IBM PC║            ┃││││││││     ┃
                         ║      ║            ┃││││││││     ┃
                                             ┃││││││││     ┃
                  ┌─────────────────────┐    ┃││││││││     ┃
                  │                     │    ┃││││││││     ┃
                  │ пультовой процессор ┌───→┃─────────────┃
                  │                     │    ┃             ┃
                  │    для  МКБ-8601    │    ┃  МКБ-8601   ┃
                  └─────────────────────┘    ┗━━━━━━━━━━━━━┛
       Рис.1. Инструментальное обеспечение проекта МКБ-8601.

   В соответствии с этой методикой была создана универсальная
ЭВМ  МКБ-8601.  Весь  комплекс  инструментальных  программно-
аппаратных средств проекта МКБ приведен на  рис.1.  Цифры  на
рисунке - ссылки на литературу  с  описанием  соответствующей
системы.



               2.1.Программный имитатор МКБ.


   В ходе проектирования МКБ-8601 для изучения  эффективности
ее архитектуры был создан программный имитатор  проектируемой
ЭВМ /34/, чтобы обеспечить  окружение  для  работы  программ,
написанных для целевой машины.

   Модель  или  имитатор  -  это  программа  или  устройство,
моделирующее  функционирование  некоторого  объекта.   Обычно
"модель" подразумевает моделирование  внутреннего  устройства
объекта  и  используется  для  его  исследования;  "имитатор"
относится к моделированию внешних  проявлений  и  применяется
вместо моделируемого объекта /35/. В разработанном  имитаторе
моделируется архитектура МКБ для одного  процесса:  регистры,
форматы данных,  способы  адресации,  система  команд  и  все
прерывания,  возникающие  при  работе   процесса.   Полностью
моделируется  математический  режим  исполнения  программ   и
частично - режим диспетчера.

   Поскольку одна из основных  задач  при  разработке  МКБ  -
эмуляция БЭСМ-6, следовательно, для эффективного  ее  решения
архитектура МКБ должна  соответствовать  архитектуре  БЭСМ-6:
страничная  организация  памяти,   набор   регистров   режима
математика,  способы  адресации  и  т.д.  Поэтому  с  помощью
имитатора  подбирались  только   система   команд,   наиболее
подходящая  для  функционирования  операционной   системы   и
прикладных программ, а также форматы данных.

   Кроме того, программный имитатор представляет собой  часть
кросс-системы подготовки программ для МКБ,  в  которую  также
входят транслятор с  языка  ассемблер  и  загрузчик  /36,37/.
Кросс-система использовалась на ЭВМ БЭСМ-6  для  параллельной
подготовки программного обеспечения. Вклад диссертанта в  эту
работу заключается в создании программного имитатора.

   Имитатор  связан   со   всей   кросс-системой   подготовки
программ.  Транслятор  и  загрузчик  записывают   готовую   к
исполнению  программу  в  специальную  область   на   внешнем
устройстве, которая является моделью виртуальной  памяти  МКБ

для имитатора, откуда программа считывается и исполняется.  В
имитаторе полностью  моделируется  командный  цикл  МКБ-8601,
заключающийся в выборке командного слова, выборке операнда  и
исполнении команды. Прерывания, которые  могут  возникнуть  в
процессе выборки команды, чтения или записи  операнда  или  в
процессе исполнения команды,  проверяются  последовательно  в
зависимости от приоритета.  Имитируется  64-разрядный  формат
слова ОЗУ МКБ  и  8-разрядный  тег  со  значениями  разрядов,
принятыми  в  МКБ,  что  позволяет   использовать   его   для
отладочного режима.

   В состав имитатора входит программа-администратор, которая
фактически выполняет функции пультового процессора:  просмотр
памяти и регистров, ввод и  поиск  данных,  задание  шагового
режима исполнения программы и т.д.  для  эффективной  отладки
программ.

   Кроме того,  загрузчик  кросс-системы  передает  имитатору
таблицу  загрузки   программы,   содержащую   внешние   имена
программы  и  их  адреса  после  загрузки,   поэтому   вместо
численного адреса можно использовать их символические имена.

   Транслятор и  загрузчик  работали  на  БЭСМ-6  и  работают
непосредственно на новой машине  в  режиме  эмуляции  БЭСМ-6,
имитатор был необходим только  до  полной  наладки  макетного
образца МКБ.  При  создании  имитатора  были  получены  более
четкие представления о функционировании отдельных блоков ЦП и
всей системы в целом, которые в  дальнейшем  пригодились  для
написания микропрограмм. С помощью имитатора был  подготовлен
и  отлажен  комплексный  тест  МКБ  командного  уровня,   что
позволило  существенно  сократить  срок   наладки   макетного
образца машины.



            2.2.Логическое моделирование ЦП МКБ.


   Следующим  этапом  разработки  ЭВМ   является   логическое
моделирование.

   Моделирование  определяется   как   процесс,   позволяющий
представить функционирование одной системы с  помощью  другой
/1/.  В  области  обработки  данных  этот  процесс   является
процессом моделирования физического  поведения  одной  машины
посредством другой. Такой подход отличается  от  покомандного
перевода,   где   каждая   команда    или    строки    команд
последовательно  интерпретируются  во  время  исполнения.   В

моделирующей машине как бы существует  детальное  изображение
моделируемой машины.

   При  проектировании  такого   сложного   устройства,   как
центральный   процессор   МКБ-8601   /38,39/   (порядка   500
микросхем),  необходимо  на   начальной   стадии   разработки
провести  его  логическое   моделирование.   Это   позволяет,
во-первых,   проверить   возможность   реализации    заданной
архитектуры  в  виде   программной   модели   на   конкретной
технологической базе цифровых интегральных схем и  обнаружить
логические ошибки в  схемах  до  их  реального  воплощения  в
аппаратуре,  что  сокращает  время   технической   реализации
проекта и его стоимость.  Во-вторых,  моделирование  помогает
лучше   понять   структуру   проектируемого   устройства    и
взаимодействие   отдельных   его    функциональных    блоков.
В-третьих,   описание   на   формальном   языке   логического
моделирования представляет  из  себя  документацию,  понятную
широкому кругу специалистов.

   Для    проведения    моделирования    была    использована
разработанная в ИТМ и ВТ система "Пульс" - одна  из  немногих
систем логического моделирования, доступных на БЭСМ-6 /40/.



  ╔═══════════════╗   ╔═════════════════╗   ╔══════════╗
  ║               ║   ║                 ║   ║          ║
  ║ Язык описания ║   ║  Язык описания  ║   ║   Язык   ║
  ║               ║   ║                 ║   ║          ║
  ║    базовых    ║   ║ конструируемых  ║   ║ описания ║
  ║               ║   ║                 ║   ║          ║
  ║   элементов   ║   ║    объектов     ║   ║  тестов  ║
  ╚═══════════╤═══╝   ╚════════╤════════╝   ╚═════╤════╝
              │                │                  │
              │                │                  │
              ↓                ↓                  │
           ┌──────────────────────────────────┐   │
           │                                  │   │
           │    А Р Х И В    П Р О Е К Т А    │←──╴
           └──────────────↑────↑──────────────┘
                          │    │
                          │    │
                     ┌────↓────↓───┐
                     │             │
                     │ Компоновщик │
                     │             │
                     │             │
                     │ устройства  │
                     └──────┬──────┘
                            │
                   ┌────────↓────────┐
                   │                 │
                   │  Моделирующая   │
                   │                 │
                   │                 │
                   │   программа     │
                   └────────╥────────┘
                            ║
                       .....V.....
                   │                 │
                   │ о             о │
                   │                 │
                   │ о  временные  о │
                   │                 │
                   │ о  диаграммы  о │
                   │                 │
                   │ о             о │
                       ...........
    Рис.2.   Структурная организация системы "Пульс".

   Система "Пульс" ориентирована на событийное  моделирование
в трехзначной логике  (0,1  и  неопределенное  состояние),  с
учетом номинальных задержек  базовых  элементов.  Структурная
организация системы "Пульс" изображена на рис.2.

   Проектируемые  схемы  представляются  в  системе  в   виде
объектов. Описания  объектов  выполняются  на  входном  языке
формульного  типа,  основными   чертами   которого   являются
компактность (за счет широкого  использования  индексации)  и
универсальность (единообразное  описание  объектов  различных
уровней иерархии).

   Объекты нижнего уровня  иерархии  конструируются  из  т.н.
базовых  элементов.  Базовый  элемент  характеризуется  своим
заголовком   (перечень   входов   и   выходов)   и   функцией
срабатывания, определяющей алгоритм функционирования элемента
при его моделировании (в частности,  временные  задержки).  К
базовым элементам относятся, например, серийно  выпускающиеся
микросхемы.

   Функции    срабатывания    описываются    на    специально
разработанном  фортраноподобном  инструментальном  языке.  По
существу, во время моделирования каждый тип базового элемента
представляется в ЭВМ отдельной  подпрограммой,  состоящей  из
множества обращений  к  процедурам  чтения,  записи  значений
сигналов, записи событий  и  т.п.  Система  осуществляет  как
динамический, так и  статический  режимы  моделирования.  При
статическом  моделировании  очередные   входные   воздействия
подаются лишь  после  того,  как  закончится  распространение
предыдущих. Таким образом, входные воздействия в этом  случае
можно задавать без учета времени распространения  сигналов  в
схеме.

   Непосредственным   результатом   моделирования    является
потактовая  временная  диаграмма,  на  которую  автоматически
выводятся   входные   и   выходные   сигналы    моделируемого
устройства. Перечень  сигналов  можно  изменять  и  дополнять
внутренними сигналами устройства и составляющих его обьектов.
Перед моделированием  задаются  входные  воздействия  в  виде
теста или указывается заранее составленный тест.

   Для  описания  функциональных  тестов  в  системе  имеется
простой язык, позволяющий  описывать  входные  воздействия  в
произвольные   моменты   модельного    времени.    В    языке
предусмотрены специальные средства для задания  периодических

воздействий, что значительно облегчает описание синхронизации
устройств. Описания тестов хранятся в архиве проекта, так же,
как и описания проектируемых устройств.

   При  моделировании  процессора  МКБ-8601  можно   выделить
следующие этапы /41/:

   - программирование    поведения     базовых     элементов,
отсутствовавших в архиве системы "Пульс";

   - описание  структуры  отдельных  блоков   процессора   на
входном   языке    системы,    трансляция    во    внутреннее
представление.

   - подготовка    тестовых    последовательностей    входных
сигналов;

   - компоновка единой модели процессора, управляющие сигналы
для которой поступают из  ПЗУ-обьекта,  моделирующего  память
микропрограмм;

   - анализ   полученных   временных   диаграмм,   поиск    и
исправление ошибок в схемах, редактирование описаний.

   Первые 3 этапа, представляющие  из  себя  накопление  базы
данных проекта МКБ, выполнены параллельно. Когда модель  была
доведена до уровня  процессора  в  целом,  для  автоматизации
внесения в нее микропрограмм были  использованы  имеющиеся  в
системе "Пульс" возможности формирования обьектов в  пакетном
режиме. К выходу кросс-системы микропрограммирования /42/ был
добавлен блок, осуществлявший  перевод  готовой  программы  в
описание объекта типа ПЗУ и вызов системы "Пульс" в  пакетном
режиме  приема   данных.   Закончив   формирование   объекта,
моделирующего микропрограмму, "Пульс" переходил в  диалоговый
режим. Таким образом, за один  терминальный  сеанс  с  БЭСМ-6
можно было создать  микропрограмму,  используя  все  удобства
кросс-системы, включить ее в модель процессора МКБ и получить
диаграмму  ее  работы.  Фактически,   произошло   объединение
нескольких независимо разработанных инструментальных систем.

   Кросс-система /42/, ядром которой является микроассемблер,
реализует  типовой  набор  функций,  сформулированный  еще  в
ранних  работах  по  микропрограммированию  и   автоматизации
/1,7/. Это ввод и хранение текстов микропрограмм  на  входном
языке, трансляция этих микропрограмм в микрокод,  статическая
проверка структуры микрокода, сборка единой микропрограммы  и
передача ее в объектную машину.

   В отличие от подходов, описанных в /43,44/, в этой системе

основной задачей подсистемы моделирования было  не  получение
готовых для загрузки в управляющую  память  микропрограмм,  а
поиск  оптимальных  решений  при  проектировании  аппаратуры,
выбор структуры микрокомандного слова и проверка правильности
функционирования  системы  в  целом.  Так,  например,  формат
микрокоманды в ходе проектирования  неоднократно  менялся,  а
разрядность микропрограммного слова увеличилась от 96 до  112
разрядов.

   Моделирование процессора в целом, когда  управление  всеми
блоками ЦП производилось из объекта, выполняющего функции ПЗУ
микропрограмм, осуществлялось  диссертантом.  На  модели  был
выявлен ряд ошибок в проектируемых схемах. К  числу  наиболее
существенных относятся отсутствие тактирования при  работе  с
некоторыми   внешними   сигналами,   ошибки   при   кодировке
программируемых логических матриц и др.  Поэтому  затраты  на
освоение и использование  системы  логического  моделирования
вполне окупились.



           2.3.Микропрограммное тестирование МКБ.


   По мере  возрастания  сложности  систем  обработки  данных
усложняется также и проблема их эксплуатации и  обслуживания.
Для  наладки  и  эксплуатации  любой  вычислительной   машины
необходима эффективная система тестирования.

   Диагностическая    система    должна    иметь    следующие
характеристики /1/:

   1)обладать высокой "разрешающей способностью"  обнаружения
и локализации неисправности;

   2)быть достаточно простой;

   3)использовать для своей работы минимальную часть системы;

   4)диагностический пакет  должен  быть  полным  и  работать
автоматически.

   При представлении архитектуры  вычислительной  машины  как
многоуровневой /29/ очевидно, что  каждый  очередной  уровень
будет   зависеть   от   функционирования    предыдущего.    В
вычислительных  машинах  с  аппаратной  реализацией   системы
команд тесты для аппаратуры пишутся на языке команд машины. В
машинах  с  микропрограммным  управлением  на  этапе  наладки
аппаратуры  возможно  использование  только  микропрограммных
тестов. Более того, некоторые режимы работы и отдельные блоки
центрального процессора (ЦП) недоступны или труднодоступны на

командном уровне (например, кэш или  режим  блочной  передачи
информации). Далее, после  наладки  аппаратуры  и  подготовки
микропрограмм  для  исполнения  команд  уже   могут   реально
использоваться и командные тесты. Однако назначение командных
тестов в этом случае  ограничено,  т.к.  они  проверяют  либо
правильность  исполнения  команд,  либо   часть   аппаратуры,
которая не используется в процессе  работы  теста  (например,
свободная после записи теста часть ОЗУ или память и  регистры
внешних    устройств),    либо    в    принципе     проверяют
работоспособность всей машины, как правило,  без  локализации
места неисправности.

   Микропрограммные  тесты  имеют   ряд   преимуществ   перед
программными /1,45/:

   1)имеют большую "разрешающую способность" при  обнаружении
и локализации неисправностей в аппаратуре;

   2)отличаются   большим   быстродействием:   по    скорости
микропрограммы превосходят соответствующие обычные  программы
примерно в 10 раз;

   3)для функционирования микропрограммных  тестов  требуется
гораздо  меньшее  по  объему  начальное   аппаратурное   ядро
системы, чем в случае программной диагностики.

   В некоторых вычислительных машинах для организации  тестов
может  использоваться  пульт  ЭВМ.  Но  архитектура  МКБ-8601
такова, что для обеспечения доступа к регистрам и  внутренней
памяти ЦП с помощью пультового процессора  (ПП)  нужно,  чтоб
основная   часть   ЦП   функционировала,    что    затрудняет
использование ПП в тестах.

   Поэтому при  настройке  МКБ  и  в  дальнейшем  в  процессе
эксплуатации для локализации места неисправности используются
в основном микропрограммные тесты /75/.



          2.3.1.Структура микропрограммных тестов


                  и методика тестирования.


   Перечислим  основные  блоки   МКБ-8601,   используемые   в
микропрограммных тестах (рис.3):

   - блок микропрограммного управления;

   - микропроцессор К580ВМ80 с собственной памятью, в которой
находится  программа-монитор,   управляемая   с   дисплея   и
исполняющая простейшие  функции  (пуск  с  заданного  адреса,
просмотр памяти и т.д.). Все это необходимо  для  загрузки  и

запуска микропрограммных тестов.

   - блок обмена информацией с пультовым процессором  (БОПП),
представляющий из себя двухпортовую  память  (16  8-разрядных
регистров), доступную как БМПУ, так и К580ВМ80. Эти  регистры
- часть собственной памяти К580ВМ80,  поэтому  их  содержимое
можно просмотреть на экране,  используя  стандартные  команды
монитора.



┏━━━━━━━━━━━━━━━━━━┓
┃                  ┃
┃                  ┃                           микро-ЭВМ
┃ память, регистры ┃
┃                  ┃
┃                  ┃                       ╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌
┃внешних устройств ┃  Д ┏━━━━━━━━━━━━┓  Д ╎                 ╎
┃                  ┃    ┃            ┃    ╎┏━━━━━━━━━━━━━━━┓╎
┃                  ┃←──→┃            ┃←──→╎┃               ┃╎
┃──────────────────┃    ┃  Б О П П   ┃    ╎┃               ┃╎
┃                  ┃    ┃            ┃    ╎┃               ┃╎
┃                  ┃  А ┃            ┃  А ╎┃    К580ВМ80   ┃╎
┃  О З У   М К Б   ┃    ┃            ┃    ╎┃               ┃╎
┃                  ┃←──→┃16РГ.* 8 БИТ┃←───╎┃               ┃╎
┃                  ┃    ┃            ┃    ╎┃               ┃╎
┃──────────────────┃    │            │    ╎┃───────────────┃╎
┃                  ┃    ┗━━━━━━━━━━━━┛    ╎┃               ┃╎
┃                  ┃                      ╎┃               ┃╎
┃   Ц П   М К Б    ┃                      ╎┃               ┃╎
┃                  ┃             ╶───────→╎┃ П З У , О З У ┃╎
┃                  ┃             │        ╎┃               ┃╎
┗━━━━━━━━━━━━━━━━━━┛             │   ┌────╎┃               ┃╎
       │  ↑                      │   │    ╎┗━━━━━━━━━━━━━━━┛╎
       │  │                      │   │    ╎      │  │       ╎
       │  │                      │   │    ╎      │  │       ╎
       │  │                      │   │    ╎      │  │       ╎
       │  │                      │   │    ╎      │  │       ╎
       │  │                      │   │    ╎      │  ↓       ╎
       ↓                         │   │    ╎   ────────────  ╎
┏━━━━━━━━━━━━━━━━┓               │   │    ╎  /           /│ ╎
┃                ┃               │   │    ╎ ┏━━━━━━━━━━━┓ │ ╎
┃                ┃               │   │    ╎ ┃           ┃ │ ╎
┃    Б М П У     ┃               │   │    ╎ ┃/─────────\┃ │ ╎
┃                ┃         Д     │   │    ╎ ┃│         │┃ │ ╎
┃                ┃               │   │    ╎ ┃│         │┃ │ ╎
┃────────────────┃←──────────────╴   │    ╎ ┃│         │┃ │ ╎
┃                ┃                   │    ╎ ┃\─────────/┃ │ ╎
┃                ┃         А         │    ╎ │           │   ╎
┃   О З У   М П  ┃                   │    ╎ ┗━━━━━━━━━━━┛/  ╎
┃                ┃←──────────────────╴    ╎ /           /   ╎
                                          ╎/───────────/    ╎
┗━━━━━━━━━━━━━━━━┛
                                           ╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌
   Рис.3. Основные функциональные узлы МКБ-8601, используемые
в микропрограммных тестах. А - адрес, Д - данные.


   0   1   2   3   4         7   8                       15
 ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
 ┃   │   │   │   │             │                           ┃
 ┃   │   │   │   │             │                           ┃
 ┃   │   │   │   │  А Д Р Е С  │        Д А Н Н Ы Е        ┃
 ┃   │   │   │   │             │                           ┃
     │   │   │   │             │                           │
 ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
               │
   │   │   │
   │   │   │   ↓
   │   │   │
   │   │   ↓  ИНДИКАЦИЯ РАБОТЫ ТЕСТА
   │   │
   │   │
   │   ↓  КОД ОШИБКИ
   │
   │
   ↓  ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ
  НОМЕР ТЕСТА
   Рис.4. Назначение  регистров  БОПП  при микропрограммном
тестировании.
   После  загрузки  теста  в   ОЗУ   микропрограмм   К580ВМ80

запускает  заданный  тест,  подставляя  его   адрес   в   ОЗУ
микропрограмм. Результат работы теста записывается в БОПП.

   Все  микропрограммные  тесты  в  зависимости  от  объектов
тестирования функционально делятся на 10 отдельно загружаемых
пакетов. Каждый  пакет  микропрограммных  тестов  состоит  из
независимых     подпрограмм,      проверяющих      какой-либо
функциональный блок.

   Все  тесты  по  мере  возможности  унифицированы  (рис.4).
Каждый из них имеет свой номер, который  записывается  в  0-й
регистр БОПП. Индикация работы теста производится  изменением
кода в 3 регистре. При  обнаружении  ошибки  во  2-й  регистр
записывается код ошибки, а в 1-ый  регистр  -  условный  код,
показывающий, при какой ситуации обнаружена ошибка (например,
ошибка обнаружена при первом чтение или последующих и  т.д.).
В 8-15 рг. БОПП, как правило, данные, получаемые при  чтении,
в  4-7  регистрах  -   адрес.   Содержимое   регистров   БОПП
просматривается на дисплее командами монитора К580ВМ80. Такая
организация тестов с записью  результатов  в  БОПП  позволяет
следить за их исполнением без анализирующей аппаратуры.

   Можно выделить два режима  использования  тестов:  наладка
конкретного функционального блока и комплексная  проверка.  В
процессе наладки аппаратуры для поиска  неисправностей  нужно
большое  количество  небольших  тестов,  каждый  из   которых
проверяет один или группу сигналов отдельного функционального
блока, начиная с простых алгоритмов и заканчивая сложными.  В
процессе работы периодически  бывает  необходима  комплексная
проверка всех функциональных блоков. Для  модификации  пакета
тестов  из  одного  режима  в  другой  используется   аппарат
макросов микроассемблера /42/. Все небольшие  тесты  написаны
таким  образом,  что  последняя  микрокоманда  есть   макрос,
которая для случая наладки блока есть передача управления  на
начало этого теста,  а  для  случая  комплексной  проверки  -
передача  управления  на  следующий  тест.   Простая   замена
содержимого   макроса   (тела    макроса)    с    последующей
перетрансляцией превращает множество небольших тестов в  один
большой комплексный тест.



            2.3.2.Тесты центрального процессора.


   Методы  тестирования  различных  функциональных  элементов
исследованы  в  более  ранних  работах  /46,47/.   Тесты   ЦП

построены по методике  "расширяющегося  ядра"  /48/.  Сначала
проверяются  блоки  ЦП,   без   правильной   работы   которых
невозможна работа более  сложных  тестов.  Это  -  БМПУ,  где
проверяется    правильность    исполнения    микрокоманд    и
формирование признаков условий; регистры  БОПП,  используемые
для записи  информации  о  работе  тестов;  микропроцессорные
секции, состоящие из внутренних  регистров  и  АЛУ;  выходные
признаки АЛУ для анализа результатов.

   После проверки этих блоков ЦП и используя  их  в  качестве
эталонных выполняется тестирование следующих более сложных  и
независимых блоков:

   - блок  работы  с  командным  словом,  включающий  регистр
командного   слова,   адрес   команды,   код    операции    и
индекс-регистр; регистры операнда, результата и тега;

   - арифметические  блоки:  сдвигатель,  блок  поиска  левой
единицы;

   - блок индекс-регистров или  модификаторов,  состоящий  из
регистра номера группы и групп индекс-регистров;

   - блок формирования физического адреса, в состав  которого
входят   регистры   приписки,   регистры   номера   процесса,
исполнительного адреса, физической страницы и т.д.

   Порядок проверки регистров и  памяти,  входящих  в  состав
этих блоков, следующий:

   - запись заданного числа (для тестов памяти  -  запись  по
заданному адресу);

   - запись констант "0" или "1";

   - запись переменного числа;

   - запись home-адреса и инвертированного адреса (для тестов
памяти).

   После успешного завершения тестов для внутренних блоков ЦП
проверяются  ОЗУ  МКБ-8601  (см.  ниже),  специальные  режимы
работы памяти, кэш  команд  и  операндов,  схема  исправления
ошибочных разрядов памяти.

   Последняя  и  самая  большая  часть  тестов   -   проверка
прерываний,  возникающих  при  формировании   исполнительного
адреса и при обращениях к  ОЗУ,  условий  их  формирования  и
приоритетов.



             2.3.3.Тесты   О З У   М К Б-8601.


   Взаимодействие между ЦП и ОЗУ - один из  наиболее  сложных

моментов  в  работе  любой  ЭВМ.  Поэтому  для  проверки  ОЗУ
подготовлен отдельный большой пакет тестов.

   Все тесты ОЗУ можно поделить на несколько групп.

   Линейные тесты - данные по каждому адресу ОЗУ  проверяются
независимо  от  всех  остальных.   Скорость   их   исполнения
пропорциональна емкости памяти  N.  Они  используются  прежде
всего для наладки блока управления памятью, проверки адресных
шин и шин данных, а также для предварительной проверки  самой
памяти. Это тесты попеременной записи в  память  "0"  и  "1",
запись  шахматного  кода,  запись  данных,   равных   адресу,
перемещаемому в пределах длины слова, тест типа "крест"  /49/
и т.д.

   Квадратичные  тесты  -  проверяют  все  попарные  передачи
информации между любыми двумя элементами памяти. Скорость  их
                              2
исполнения  пропорциональна  N .  Как  правило,   эти   тесты
используются  для  производственного  тестирования  микросхем
памяти. Это тесты типа "галоп", "попарная запись - считывание
с  полным  перебором"  /49/.   Скорость   их   исполнения   и
эффективность поиска ошибок невелики, поэтому при наладке они
использовались достаточно редко.

                                                        3
                                                        /2
   Тесты, скорость исполнения которых пропорциональна  N ,  -
занимают   промежуточное   положение   между   линейными    и
квадратичными тестами.  Поскольку  каждая  микросхема  памяти
                          ┌──┐  ┌──┐
есть  матрица  размером  √  N *√  N ,  данные  по  выбранному
адресу для повышения эффективности  алгоритма  поиска  ошибок
проверяют с передачей информации не по всем адресам, а только
по тем, при обращении к которым  по  предположению  возникает
максимальное количество помех. Например, данные по выбранному
адресу   проверяют   с   пересылками   данных   по   адресам,
пересекающим выбранный адрес по строке или столбцу. Эти тесты
("бегущий столбец", "баттерфляй"  /49/)  наиболее  приемлемы,
т.к. позволяют достаточно  хорошо  проверить  всю  память  за
разумное время.

   Специальные тесты - это тесты, учитывающие  специфику  ОЗУ
прежде всего как динамической памяти. Например, для  проверки
процесса регенерации  в  тестах   после  цикла  записи  перед
контрольным  считыванием  делается  пауза,   превышающая   по
времени цикл регенерации. В другом случае  перед  контрольным
считыванием делается обращение по  соседним  адресам  памяти,

вносящее  дополнительные  помехи  в   цикл   регенерации   по
выбранному   адресу.   Это   тест   "возбуждение   накопителя
многократным считыванием" /49/.

   В состав аппаратуры управления  памятью  входит  генератор
кода Хемминга, исправляющего  однократные  ошибки  /50/.  Для
более эффективной проверки  памяти  необходимо  отключить  на
время прогонки любого теста схему исправления ошибок, либо во
время  работы   теста   следить   за   изменением   синдрома,
исправляющего  ошибки,  и  по  его  коду   определять   номер
ошибочного разряда.



        2.3.4.Микропрограммные тесты других объектов


        (регистров и памяти пультового процессора).


   Кроме  ОЗУ  на  общую  шину  МКБ-8601  выходит   пультовой
процессор (ПП). Часть его  регистров  и  памяти  доступна  ЦП
через адреса внешних устройств. Проверка  этих  узлов  машины
возможна  тестами,  написанными  на  командном   уровне.   Но
поскольку   в   процессе   исполнения   команд   используются
дополнительные сигналы (тесты находятся в ОЗУ и для их работы
необходима  выборка  командного  слова,   чтение   и   запись
операнда),  они   затрудняют   изучение   ситуации.   Поэтому
тестирование производится последовательно, и на первых этапах
наладки используются микропрограммные тесты.

   Для этих целей  были  созданы  тесты,  проверяющие  память
двойного доступа ПП, часы и таймер астрономического времени и
т.д.

   Комплекс  микропрограммных   тестов   позволил   настроить
практически  все  узлы  МКБ-8601,  доступные  микропрограмме.
Кроме того, полный или упрощенный вариант этих  тестов  может
использоваться  при  регулярной  проверке  аппаратуры  и  для
поиска неисправностей при неполадках.

   Суммарный объем тестов - более 100К байт.
